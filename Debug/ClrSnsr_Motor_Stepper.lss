
ClrSnsr_Motor_Stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  000011fa  0000128e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ac  00800212  00800212  000012a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016c3  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da2  00000000  00000000  00002a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c5b  00000000  00000000  0000383d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  00004498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072a  00000000  00000000  000047f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec2  00000000  00000000  00004f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00005de0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	34 c4       	rjmp	.+2152   	; 0x86e <__vector_1>
       6:	00 00       	nop
       8:	8a c3       	rjmp	.+1812   	; 0x71e <__vector_2>
       a:	00 00       	nop
       c:	7a c3       	rjmp	.+1780   	; 0x702 <__vector_3>
       e:	00 00       	nop
      10:	a0 c4       	rjmp	.+2368   	; 0x952 <__vector_4>
      12:	00 00       	nop
      14:	df c5       	rjmp	.+3006   	; 0xbd4 <__vector_5>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea ef       	ldi	r30, 0xFA	; 250
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 31       	cpi	r26, 0x12	; 18
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a2 e1       	ldi	r26, 0x12	; 18
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ae 3b       	cpi	r26, 0xBE	; 190
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	b7 d4       	rcall	.+2414   	; 0xa8e <main>
     120:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <setup>:
		numElements++;
		temp = temp->next;
	}/*while*/
	
	return(numElements);
}/*size*/
     126:	fc 01       	movw	r30, r24
     128:	11 82       	std	Z+1, r1	; 0x01
     12a:	10 82       	st	Z, r1
     12c:	fb 01       	movw	r30, r22
     12e:	11 82       	std	Z+1, r1	; 0x01
     130:	10 82       	st	Z, r1
     132:	08 95       	ret

00000134 <initLink>:
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	ec 01       	movw	r28, r24
     13a:	84 e0       	ldi	r24, 0x04	; 4
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	3a d7       	rcall	.+3700   	; 0xfb4 <malloc>
     140:	99 83       	std	Y+1, r25	; 0x01
     142:	88 83       	st	Y, r24
     144:	fc 01       	movw	r30, r24
     146:	13 82       	std	Z+3, r1	; 0x03
     148:	12 82       	std	Z+2, r1	; 0x02
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <enqueue>:
     150:	db 01       	movw	r26, r22
     152:	ed 91       	ld	r30, X+
     154:	fc 91       	ld	r31, X
     156:	30 97       	sbiw	r30, 0x00	; 0
     158:	61 f0       	breq	.+24     	; 0x172 <enqueue+0x22>
     15a:	da 01       	movw	r26, r20
     15c:	8d 91       	ld	r24, X+
     15e:	9c 91       	ld	r25, X
     160:	11 97       	sbiw	r26, 0x01	; 1
     162:	93 83       	std	Z+3, r25	; 0x03
     164:	82 83       	std	Z+2, r24	; 0x02
     166:	8d 91       	ld	r24, X+
     168:	9c 91       	ld	r25, X
     16a:	fb 01       	movw	r30, r22
     16c:	91 83       	std	Z+1, r25	; 0x01
     16e:	80 83       	st	Z, r24
     170:	08 95       	ret
     172:	da 01       	movw	r26, r20
     174:	2d 91       	ld	r18, X+
     176:	3c 91       	ld	r19, X
     178:	11 97       	sbiw	r26, 0x01	; 1
     17a:	fc 01       	movw	r30, r24
     17c:	31 83       	std	Z+1, r19	; 0x01
     17e:	20 83       	st	Z, r18
     180:	8d 91       	ld	r24, X+
     182:	9c 91       	ld	r25, X
     184:	db 01       	movw	r26, r22
     186:	8d 93       	st	X+, r24
     188:	9c 93       	st	X, r25
     18a:	08 95       	ret

0000018c <dequeue>:
     18c:	fc 01       	movw	r30, r24
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
     192:	da 01       	movw	r26, r20
     194:	8d 93       	st	X+, r24
     196:	9c 93       	st	X, r25
     198:	a0 81       	ld	r26, Z
     19a:	b1 81       	ldd	r27, Z+1	; 0x01
     19c:	10 97       	sbiw	r26, 0x00	; 0
     19e:	31 f0       	breq	.+12     	; 0x1ac <dequeue+0x20>
     1a0:	12 96       	adiw	r26, 0x02	; 2
     1a2:	8d 91       	ld	r24, X+
     1a4:	9c 91       	ld	r25, X
     1a6:	13 97       	sbiw	r26, 0x03	; 3
     1a8:	91 83       	std	Z+1, r25	; 0x01
     1aa:	80 83       	st	Z, r24
     1ac:	08 95       	ret

000001ae <firstValue>:
     1ae:	dc 01       	movw	r26, r24
     1b0:	ed 91       	ld	r30, X+
     1b2:	fc 91       	ld	r31, X
     1b4:	80 81       	ld	r24, Z
     1b6:	91 81       	ldd	r25, Z+1	; 0x01
     1b8:	08 95       	ret

000001ba <isEmpty>:
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 81       	ld	r18, Z
     1be:	31 81       	ldd	r19, Z+1	; 0x01
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	23 2b       	or	r18, r19
     1c4:	09 f0       	breq	.+2      	; 0x1c8 <isEmpty+0xe>
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	08 95       	ret

000001ca <ClrDet>:
/* color sensor stuff */
int ClrDet(){
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
	DDRL = 0xFF;
     1d2:	8f ef       	ldi	r24, 0xFF	; 255
     1d4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	DDRC = 0xFF;
     1d8:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;
     1da:	1a b8       	out	0x0a, r1	; 10
	int MaxCnt = 0;
	int Test_Cnt;
	int ClrFr = 0; //reset color frequency variable
	
	//S2 in pinA1. S3 in pinA0 NOTE: change to another port
	PORTL = 0b00000000; //RED FILTER
     1dc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	DDRC = 0xFF;
	DDRD = 0x00;
	
	int MaxCnt = 0;
	int Test_Cnt;
	int ClrFr = 0; //reset color frequency variable
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	30 e0       	ldi	r19, 0x00	; 0
	PORTL = 0b00000000; //RED FILTER
	//PORTL = 0b00000001; //blue
	//PORTL = 0b00000010; //clear
	//PORTL = 0b00000011; //green
	
	for (Test_Cnt=0;Test_Cnt<=5;Test_Cnt++)
     1e4:	00 e0       	ldi	r16, 0x00	; 0
     1e6:	10 e0       	ldi	r17, 0x00	; 0
int ClrDet(){
	DDRL = 0xFF;
	DDRC = 0xFF;
	DDRD = 0x00;
	
	int MaxCnt = 0;
     1e8:	c0 e0       	ldi	r28, 0x00	; 0
     1ea:	d0 e0       	ldi	r29, 0x00	; 0
	PORTL = 0b00000000; //RED FILTER
	//PORTL = 0b00000001; //blue
	//PORTL = 0b00000010; //clear
	//PORTL = 0b00000011; //green
	
	for (Test_Cnt=0;Test_Cnt<=5;Test_Cnt++)
     1ec:	2d c0       	rjmp	.+90     	; 0x248 <ClrDet+0x7e>
	{
		while ((PIND & 0b10000000) == 0b10000000);//Falling edge come, start timer counter CHECK AND MAKE SURE CLR SNSR OUTPUT IS PIN7 NOT PIN0
     1ee:	4f 99       	sbic	0x09, 7	; 9
     1f0:	fe cf       	rjmp	.-4      	; 0x1ee <ClrDet+0x24>
		
		TCNT5 = 0x0000;
     1f2:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     1f6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
		TCCR5B |= _BV(CS50);//start the timer counter
     1fa:	e1 e2       	ldi	r30, 0x21	; 33
     1fc:	f1 e0       	ldi	r31, 0x01	; 1
     1fe:	80 81       	ld	r24, Z
     200:	81 60       	ori	r24, 0x01	; 1
     202:	80 83       	st	Z, r24
		
		while((PIND & 0b10000000) == 0b00000000);//during the low voltage, do nothing but count
     204:	4f 9b       	sbis	0x09, 7	; 9
     206:	fe cf       	rjmp	.-4      	; 0x204 <ClrDet+0x3a>
		TCCR5B = 0x0000;//stop the timer counter
     208:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
		
		if (TCNT5>MaxCnt)
     20c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     210:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     214:	c8 17       	cp	r28, r24
     216:	d9 07       	cpc	r29, r25
     218:	20 f4       	brcc	.+8      	; 0x222 <ClrDet+0x58>
		{MaxCnt = TCNT5;}
     21a:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     21e:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
		ClrFr =  16000000/MaxCnt/600;//Calculate the Frequency 
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	74 e2       	ldi	r23, 0x24	; 36
     226:	84 ef       	ldi	r24, 0xF4	; 244
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	9e 01       	movw	r18, r28
     22c:	0d 2e       	mov	r0, r29
     22e:	00 0c       	add	r0, r0
     230:	44 0b       	sbc	r20, r20
     232:	55 0b       	sbc	r21, r21
     234:	81 d6       	rcall	.+3330   	; 0xf38 <__divmodsi4>
     236:	ca 01       	movw	r24, r20
     238:	b9 01       	movw	r22, r18
     23a:	28 e5       	ldi	r18, 0x58	; 88
     23c:	32 e0       	ldi	r19, 0x02	; 2
     23e:	40 e0       	ldi	r20, 0x00	; 0
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	7a d6       	rcall	.+3316   	; 0xf38 <__divmodsi4>
	PORTL = 0b00000000; //RED FILTER
	//PORTL = 0b00000001; //blue
	//PORTL = 0b00000010; //clear
	//PORTL = 0b00000011; //green
	
	for (Test_Cnt=0;Test_Cnt<=5;Test_Cnt++)
     244:	0f 5f       	subi	r16, 0xFF	; 255
     246:	1f 4f       	sbci	r17, 0xFF	; 255
     248:	06 30       	cpi	r16, 0x06	; 6
     24a:	11 05       	cpc	r17, r1
     24c:	84 f2       	brlt	.-96     	; 0x1ee <ClrDet+0x24>
	//FOR NEW LOGIC
	int ClrFr_BlueFilter = 0;
	int ClrFr_GreenFilter = 0;
	
	//Red/yellow indicator
	if ((ClrFr>=210)) //originally set at 220
     24e:	22 3d       	cpi	r18, 0xD2	; 210
     250:	31 05       	cpc	r19, r1
     252:	0c f4       	brge	.+2      	; 0x256 <ClrDet+0x8c>
     254:	78 c0       	rjmp	.+240    	; 0x346 <ClrDet+0x17c>
	{
		//if ((ClrFr<260)) //originally set at 255
		if ((ClrFr>270))
     256:	2f 30       	cpi	r18, 0x0F	; 15
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	38 07       	cpc	r19, r24
     25c:	7c f5       	brge	.+94     	; 0x2bc <ClrDet+0xf2>
     25e:	3a c0       	rjmp	.+116    	; 0x2d4 <ClrDet+0x10a>
		{
			for (Test_Cnt=0;Test_Cnt<=5;Test_Cnt++)
			{
				while ((PIND & 0b10000000) == 0b10000000);//Falling edge come, start timer counter CHECK AND MAKE SURE CLR SNSR OUTPUT IS PIN7 NOT PIN0
     260:	4f 99       	sbic	0x09, 7	; 9
     262:	fe cf       	rjmp	.-4      	; 0x260 <ClrDet+0x96>
				
				TCNT5 = 0x0000;
     264:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     268:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
				TCCR5B |= _BV(CS50);//start the timer counter
     26c:	e1 e2       	ldi	r30, 0x21	; 33
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	80 81       	ld	r24, Z
     272:	81 60       	ori	r24, 0x01	; 1
     274:	80 83       	st	Z, r24
				
				while((PIND & 0b10000000) == 0b00000000);//during the low voltage, do nothing but count
     276:	4f 9b       	sbis	0x09, 7	; 9
     278:	fe cf       	rjmp	.-4      	; 0x276 <ClrDet+0xac>
				TCCR5B = 0x0000;//stop the timer counter
     27a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
				
				if (TCNT5>MaxCnt)
     27e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     282:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     286:	c8 17       	cp	r28, r24
     288:	d9 07       	cpc	r29, r25
     28a:	20 f4       	brcc	.+8      	; 0x294 <ClrDet+0xca>
				{MaxCnt = TCNT5;}
     28c:	c0 91 24 01 	lds	r28, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     290:	d0 91 25 01 	lds	r29, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
				ClrFr =  16000000/MaxCnt/600;//Calculate the Frequency
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	74 e2       	ldi	r23, 0x24	; 36
     298:	84 ef       	ldi	r24, 0xF4	; 244
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	9e 01       	movw	r18, r28
     29e:	0d 2e       	mov	r0, r29
     2a0:	00 0c       	add	r0, r0
     2a2:	44 0b       	sbc	r20, r20
     2a4:	55 0b       	sbc	r21, r21
     2a6:	48 d6       	rcall	.+3216   	; 0xf38 <__divmodsi4>
     2a8:	ca 01       	movw	r24, r20
     2aa:	b9 01       	movw	r22, r18
     2ac:	28 e5       	ldi	r18, 0x58	; 88
     2ae:	32 e0       	ldi	r19, 0x02	; 2
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	50 e0       	ldi	r21, 0x00	; 0
     2b4:	41 d6       	rcall	.+3202   	; 0xf38 <__divmodsi4>
	if ((ClrFr>=210)) //originally set at 220
	{
		//if ((ClrFr<260)) //originally set at 255
		if ((ClrFr>270))
		{
			for (Test_Cnt=0;Test_Cnt<=5;Test_Cnt++)
     2b6:	0f 5f       	subi	r16, 0xFF	; 255
     2b8:	1f 4f       	sbci	r17, 0xFF	; 255
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <ClrDet+0xf6>
     2bc:	00 e0       	ldi	r16, 0x00	; 0
     2be:	10 e0       	ldi	r17, 0x00	; 0
     2c0:	06 30       	cpi	r16, 0x06	; 6
     2c2:	11 05       	cpc	r17, r1
     2c4:	6c f2       	brlt	.-102    	; 0x260 <ClrDet+0x96>
				
				if (TCNT5>MaxCnt)
				{MaxCnt = TCNT5;}
				ClrFr =  16000000/MaxCnt/600;//Calculate the Frequency
			}
			if ((ClrFr>275))	//	265 original value
     2c6:	24 31       	cpi	r18, 0x14	; 20
     2c8:	31 40       	sbci	r19, 0x01	; 1
     2ca:	0c f4       	brge	.+2      	; 0x2ce <ClrDet+0x104>
     2cc:	b8 c0       	rjmp	.+368    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
			{
				//PORTC = ClrFr;
				ClrFr = 0b01000000; //indicate yellow
     2ce:	80 e4       	ldi	r24, 0x40	; 64
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	c0 c0       	rjmp	.+384    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		}
		else
		{
			//ClrFr = 0b01000000; //indicate yellow
			
			PORTL = 0b00000011; //GREEEN FILTER
     2d4:	83 e0       	ldi	r24, 0x03	; 3
     2d6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			MaxCnt = 0;
			ClrFr = 0; //reset color frequency variable
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
		 
			for (Test_Cnt=0;Test_Cnt<=5;Test_Cnt++)
     2de:	c0 e0       	ldi	r28, 0x00	; 0
     2e0:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{
			//ClrFr = 0b01000000; //indicate yellow
			
			PORTL = 0b00000011; //GREEEN FILTER
			MaxCnt = 0;
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	10 e0       	ldi	r17, 0x00	; 0
			ClrFr = 0; //reset color frequency variable
		 
			for (Test_Cnt=0;Test_Cnt<=5;Test_Cnt++)
     2e6:	25 c0       	rjmp	.+74     	; 0x332 <ClrDet+0x168>
			{
				while ((PIND & 0b10000000) == 0b10000000);//Falling edge come, start timer counter CHECK AND MAKE SURE CLR SNSR OUTPUT IS PIN7 NOT PIN0
     2e8:	4f 99       	sbic	0x09, 7	; 9
     2ea:	fe cf       	rjmp	.-4      	; 0x2e8 <ClrDet+0x11e>
	
				TCNT5 = 0x0000;
     2ec:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     2f0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
				TCCR5B |= _BV(CS50);//start the timer counter
     2f4:	e1 e2       	ldi	r30, 0x21	; 33
     2f6:	f1 e0       	ldi	r31, 0x01	; 1
     2f8:	80 81       	ld	r24, Z
     2fa:	81 60       	ori	r24, 0x01	; 1
     2fc:	80 83       	st	Z, r24
		
				while((PIND & 0b10000000) == 0b00000000);//during the low voltage, do nothing but count
     2fe:	4f 9b       	sbis	0x09, 7	; 9
     300:	fe cf       	rjmp	.-4      	; 0x2fe <ClrDet+0x134>
				TCCR5B = 0x0000;//stop the timer counter
     302:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
		
				if (TCNT5>MaxCnt)
     306:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     30a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     30e:	08 17       	cp	r16, r24
     310:	19 07       	cpc	r17, r25
     312:	20 f4       	brcc	.+8      	; 0x31c <ClrDet+0x152>
				{MaxCnt = TCNT5;}
     314:	00 91 24 01 	lds	r16, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     318:	10 91 25 01 	lds	r17, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
				ClrFr =  16000000/MaxCnt/800;//Calculate the Frequency 
     31c:	60 e2       	ldi	r22, 0x20	; 32
     31e:	7e e4       	ldi	r23, 0x4E	; 78
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	98 01       	movw	r18, r16
     326:	01 2e       	mov	r0, r17
     328:	00 0c       	add	r0, r0
     32a:	44 0b       	sbc	r20, r20
     32c:	55 0b       	sbc	r21, r21
     32e:	04 d6       	rcall	.+3080   	; 0xf38 <__divmodsi4>
			
			PORTL = 0b00000011; //GREEEN FILTER
			MaxCnt = 0;
			ClrFr = 0; //reset color frequency variable
		 
			for (Test_Cnt=0;Test_Cnt<=5;Test_Cnt++)
     330:	21 96       	adiw	r28, 0x01	; 1
     332:	c6 30       	cpi	r28, 0x06	; 6
     334:	d1 05       	cpc	r29, r1
     336:	c4 f2       	brlt	.-80     	; 0x2e8 <ClrDet+0x11e>
											[600 for blue mode]
											[800 for green mode]
						*/					
			} //end for loop (original end for loop was line 62)
			
			if(ClrFr>=120)
     338:	28 37       	cpi	r18, 0x78	; 120
     33a:	31 05       	cpc	r19, r1
     33c:	0c f4       	brge	.+2      	; 0x340 <ClrDet+0x176>
     33e:	82 c0       	rjmp	.+260    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			{
				//PORTC = ClrFr;
				ClrFr = 0b00100000; //indicate green
     340:	80 e2       	ldi	r24, 0x20	; 32
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	87 c0       	rjmp	.+270    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	

	//blue/green indicator
	else
	{
		PORTL = 0b00000001; //BLUE FILTER
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
		MaxCnt = 0;
		ClrFr = 0; //reset color frequency variable
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	30 e0       	ldi	r19, 0x00	; 0
		 
		for (Test_Cnt=0;Test_Cnt<=5;Test_Cnt++)
     350:	c0 e0       	ldi	r28, 0x00	; 0
     352:	d0 e0       	ldi	r29, 0x00	; 0

	//blue/green indicator
	else
	{
		PORTL = 0b00000001; //BLUE FILTER
		MaxCnt = 0;
     354:	00 e0       	ldi	r16, 0x00	; 0
     356:	10 e0       	ldi	r17, 0x00	; 0
		ClrFr = 0; //reset color frequency variable
		 
		for (Test_Cnt=0;Test_Cnt<=5;Test_Cnt++)
     358:	2c c0       	rjmp	.+88     	; 0x3b2 <ClrDet+0x1e8>
		{
			while ((PIND & 0b10000000) == 0b10000000);//Falling edge come, start timer counter CHECK AND MAKE SURE CLR SNSR OUTPUT IS PIN7 NOT PIN0
     35a:	4f 99       	sbic	0x09, 7	; 9
     35c:	fe cf       	rjmp	.-4      	; 0x35a <ClrDet+0x190>
	
			TCNT5 = 0x0000;
     35e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     362:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
			TCCR5B |= _BV(CS50);//start the timer counter
     366:	e1 e2       	ldi	r30, 0x21	; 33
     368:	f1 e0       	ldi	r31, 0x01	; 1
     36a:	80 81       	ld	r24, Z
     36c:	81 60       	ori	r24, 0x01	; 1
     36e:	80 83       	st	Z, r24
		
			while((PIND & 0b10000000) == 0b00000000);//during the low voltage, do nothing but count
     370:	4f 9b       	sbis	0x09, 7	; 9
     372:	fe cf       	rjmp	.-4      	; 0x370 <ClrDet+0x1a6>
			TCCR5B = 0x0000;//stop the timer counter
     374:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
		
			if (TCNT5>MaxCnt)
     378:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     37c:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     380:	08 17       	cp	r16, r24
     382:	19 07       	cpc	r17, r25
     384:	20 f4       	brcc	.+8      	; 0x38e <ClrDet+0x1c4>
			{MaxCnt = TCNT5;}
     386:	00 91 24 01 	lds	r16, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     38a:	10 91 25 01 	lds	r17, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
			ClrFr =  16000000/MaxCnt/600;//Calculate the Frequency 
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	74 e2       	ldi	r23, 0x24	; 36
     392:	84 ef       	ldi	r24, 0xF4	; 244
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	98 01       	movw	r18, r16
     398:	01 2e       	mov	r0, r17
     39a:	00 0c       	add	r0, r0
     39c:	44 0b       	sbc	r20, r20
     39e:	55 0b       	sbc	r21, r21
     3a0:	cb d5       	rcall	.+2966   	; 0xf38 <__divmodsi4>
     3a2:	ca 01       	movw	r24, r20
     3a4:	b9 01       	movw	r22, r18
     3a6:	28 e5       	ldi	r18, 0x58	; 88
     3a8:	32 e0       	ldi	r19, 0x02	; 2
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	c4 d5       	rcall	.+2952   	; 0xf38 <__divmodsi4>
	{
		PORTL = 0b00000001; //BLUE FILTER
		MaxCnt = 0;
		ClrFr = 0; //reset color frequency variable
		 
		for (Test_Cnt=0;Test_Cnt<=5;Test_Cnt++)
     3b0:	21 96       	adiw	r28, 0x01	; 1
     3b2:	c6 30       	cpi	r28, 0x06	; 6
     3b4:	d1 05       	cpc	r29, r1
     3b6:	8c f2       	brlt	.-94     	; 0x35a <ClrDet+0x190>
										[2000 for clear mode]
										[600 for blue mode]
					*/
			int ClrFr_BlueFilter = ClrFr; //FOR NEW LOGIC					
		} //end for loop (original end for loop was line 62)
		if ((ClrFr<222)) //222 worked well
     3b8:	2e 3d       	cpi	r18, 0xDE	; 222
     3ba:	31 05       	cpc	r19, r1
     3bc:	0c f0       	brlt	.+2      	; 0x3c0 <ClrDet+0x1f6>
     3be:	45 c0       	rjmp	.+138    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		{
			PORTL = 0b00000011; //GREEN FILTER
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
	
	
	
	//FOR NEW LOGIC
	int ClrFr_BlueFilter = 0;
	int ClrFr_GreenFilter = 0;
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
		{
			PORTL = 0b00000011; //GREEN FILTER
			MaxCnt = 0;
			ClrFr = 0; //reset color frequency variable
		 
			for (Test_Cnt=0;Test_Cnt<=5;Test_Cnt++)
     3ca:	c0 e0       	ldi	r28, 0x00	; 0
     3cc:	d0 e0       	ldi	r29, 0x00	; 0
			int ClrFr_BlueFilter = ClrFr; //FOR NEW LOGIC					
		} //end for loop (original end for loop was line 62)
		if ((ClrFr<222)) //222 worked well
		{
			PORTL = 0b00000011; //GREEN FILTER
			MaxCnt = 0;
     3ce:	00 e0       	ldi	r16, 0x00	; 0
     3d0:	10 e0       	ldi	r17, 0x00	; 0
			ClrFr = 0; //reset color frequency variable
		 
			for (Test_Cnt=0;Test_Cnt<=5;Test_Cnt++)
     3d2:	2c c0       	rjmp	.+88     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			{
				while ((PIND & 0b10000000) == 0b10000000);//Falling edge come, start timer counter CHECK AND MAKE SURE CLR SNSR OUTPUT IS PIN7 NOT PIN0
     3d4:	4f 99       	sbic	0x09, 7	; 9
     3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <ClrDet+0x20a>
	
				TCNT5 = 0x0000;
     3d8:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     3dc:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
				TCCR5B |= _BV(CS50);//start the timer counter
     3e0:	e1 e2       	ldi	r30, 0x21	; 33
     3e2:	f1 e0       	ldi	r31, 0x01	; 1
     3e4:	80 81       	ld	r24, Z
     3e6:	81 60       	ori	r24, 0x01	; 1
     3e8:	80 83       	st	Z, r24
		
				while((PIND & 0b10000000) == 0b00000000);//during the low voltage, do nothing but count
     3ea:	4f 9b       	sbis	0x09, 7	; 9
     3ec:	fe cf       	rjmp	.-4      	; 0x3ea <ClrDet+0x220>
				TCCR5B = 0x0000;//stop the timer counter
     3ee:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
		
				if (TCNT5>MaxCnt)
     3f2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     3f6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
     3fa:	08 17       	cp	r16, r24
     3fc:	19 07       	cpc	r17, r25
     3fe:	20 f4       	brcc	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				{MaxCnt = TCNT5;}
     400:	00 91 24 01 	lds	r16, 0x0124	; 0x800124 <__TEXT_REGION_LENGTH__+0x7c0124>
     404:	10 91 25 01 	lds	r17, 0x0125	; 0x800125 <__TEXT_REGION_LENGTH__+0x7c0125>
				ClrFr =  16000000/MaxCnt/600;//Calculate the Frequency 
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	74 e2       	ldi	r23, 0x24	; 36
     40c:	84 ef       	ldi	r24, 0xF4	; 244
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	98 01       	movw	r18, r16
     412:	01 2e       	mov	r0, r17
     414:	00 0c       	add	r0, r0
     416:	44 0b       	sbc	r20, r20
     418:	55 0b       	sbc	r21, r21
     41a:	8e d5       	rcall	.+2844   	; 0xf38 <__divmodsi4>
     41c:	ca 01       	movw	r24, r20
     41e:	b9 01       	movw	r22, r18
     420:	28 e5       	ldi	r18, 0x58	; 88
     422:	32 e0       	ldi	r19, 0x02	; 2
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	87 d5       	rcall	.+2830   	; 0xf38 <__divmodsi4>
		{
			PORTL = 0b00000011; //GREEN FILTER
			MaxCnt = 0;
			ClrFr = 0; //reset color frequency variable
		 
			for (Test_Cnt=0;Test_Cnt<=5;Test_Cnt++)
     42a:	21 96       	adiw	r28, 0x01	; 1
     42c:	c6 30       	cpi	r28, 0x06	; 6
     42e:	d1 05       	cpc	r29, r1
     430:	8c f2       	brlt	.-94     	; 0x3d4 <ClrDet+0x20a>
											[2000 for clear mode]
											[600 for blue mode]
						*/
				ClrFr_GreenFilter = ClrFr; //FOR NEW LOGIC
			}
			if (ClrFr_GreenFilter > ClrFr_BlueFilter)
     432:	12 16       	cp	r1, r18
     434:	13 06       	cpc	r1, r19
     436:	64 f4       	brge	.+24     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			{
				//PORTC = ClrFr;
				ClrFr = 0b00100000; //indicate green
     438:	80 e2       	ldi	r24, 0x20	; 32
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	0b c0       	rjmp	.+22     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				ClrFr = 0b01000000; //indicate yellow
			}
			else
			{
				//PORTC = ClrFr;
				ClrFr = 0b10000000; //indicate red
     43e:	80 e8       	ldi	r24, 0x80	; 128
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	08 c0       	rjmp	.+16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				ClrFr = 0b00100000; //indicate green
			}
			else
			{
				//PORTC = ClrFr;
				ClrFr = 0b10000000; //indicate red
     444:	80 e8       	ldi	r24, 0x80	; 128
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	05 c0       	rjmp	.+10     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			*/
		}
		else
		{
			//PORTC = ClrFr;
			ClrFr = 0b00010000; //indicate blue
     44a:	80 e1       	ldi	r24, 0x10	; 16
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	02 c0       	rjmp	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				ClrFr = 0b00100000; //indicate green
			}
			else
			{
				//PORTC = ClrFr;
				ClrFr = 0b00010000; //indicate blue
     450:	80 e1       	ldi	r24, 0x10	; 16
     452:	90 e0       	ldi	r25, 0x00	; 0
			//PORTC = ClrFr;
			ClrFr = 0b00010000; //indicate blue
		} 
	}
	return(ClrFr);
	}
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	08 95       	ret

0000045e <mTimer>:


void mTimer(int count){
	
	//	prescaling to 8 MHz
	CLKPR = 0x80;// to enable prescale bits using CLKPR register P48
     45e:	e1 e6       	ldi	r30, 0x61	; 97
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	20 e8       	ldi	r18, 0x80	; 128
     464:	20 83       	st	Z, r18
	CLKPR = 0x01;//system frequency prescale 16000000/2=8000000 P48
     466:	21 e0       	ldi	r18, 0x01	; 1
     468:	20 83       	st	Z, r18
		WGM12, 0100). WGM is spread over two registers. Page 145.
		
		Setting the prescaler to 8 mHz (CS11, 010). CS means clock select.
		Page 157.
	*/
	TCCR1B |= _BV(WGM12);
     46a:	e1 e8       	ldi	r30, 0x81	; 129
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	20 81       	ld	r18, Z
     470:	28 60       	ori	r18, 0x08	; 8
     472:	20 83       	st	Z, r18
	TCCR1B |= _BV(CS11);
     474:	20 81       	ld	r18, Z
     476:	22 60       	ori	r18, 0x02	; 2
     478:	20 83       	st	Z, r18
	
	// initizlizng Timer/Counter equal to zero
	TCNT1 = 0x0000;
     47a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     47e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	// initializing Output Compare Register equal to 1000 cycles
	OCR1A |= 0x03E8;
     482:	e8 e8       	ldi	r30, 0x88	; 136
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	20 81       	ld	r18, Z
     488:	31 81       	ldd	r19, Z+1	; 0x01
     48a:	28 6e       	ori	r18, 0xE8	; 232
     48c:	33 60       	ori	r19, 0x03	; 3
     48e:	31 83       	std	Z+1, r19	; 0x01
     490:	20 83       	st	Z, r18
	
	/*
		clearing Timer Interrupt Flag Register by writing 1 to OCF1A bit. Page
		163.
	*/
	TIFR1 |= _BV(OCF1A);
     492:	26 b3       	in	r18, 0x16	; 22
     494:	22 60       	ori	r18, 0x02	; 2
     496:	26 bb       	out	0x16, r18	; 22
	CLKPR = 0x01;//system frequency prescale 16000000/2=8000000 P48
	
	
	// initializing loop counter
	int i;
	i = 0;
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
	TIFR1 |= _BV(OCF1A);
	
	
	
	// enter loop
	while (i < count){
     49c:	07 c0       	rjmp	.+14     	; 0x4ac <mTimer+0x4e>
		if ((TIFR1 & 0x02) == 0x02){
     49e:	b1 9b       	sbis	0x16, 1	; 22
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <mTimer+0x4e>
			TIFR1 |= _BV(OCF1A);
     4a2:	46 b3       	in	r20, 0x16	; 22
     4a4:	42 60       	ori	r20, 0x02	; 2
     4a6:	46 bb       	out	0x16, r20	; 22
			i++;
     4a8:	2f 5f       	subi	r18, 0xFF	; 255
     4aa:	3f 4f       	sbci	r19, 0xFF	; 255
	TIFR1 |= _BV(OCF1A);
	
	
	
	// enter loop
	while (i < count){
     4ac:	28 17       	cp	r18, r24
     4ae:	39 07       	cpc	r19, r25
     4b0:	b4 f3       	brlt	.-20     	; 0x49e <mTimer+0x40>
			TIFR1 |= _BV(OCF1A);
			i++;
		}
	}
	return;
}
     4b2:	08 95       	ret

000004b4 <StepperMove90CW>:
//STEPPER MOTOR RELATED SUB-FUNCTIONS//
//////////////////////////////////////

void mTimer(int count);

int StepperMove90CW(int CurStep){
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	28 97       	sbiw	r28, 0x08	; 8
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	cd bf       	out	0x3d, r28	; 61
     4d0:	8c 01       	movw	r16, r24
	int i;
	int StepArray[4] = {0b00101011, 0b00101101, 0b00110101, 0b00110011};
     4d2:	88 e0       	ldi	r24, 0x08	; 8
     4d4:	ea e0       	ldi	r30, 0x0A	; 10
     4d6:	f2 e0       	ldi	r31, 0x02	; 2
     4d8:	de 01       	movw	r26, r28
     4da:	11 96       	adiw	r26, 0x01	; 1
     4dc:	01 90       	ld	r0, Z+
     4de:	0d 92       	st	X+, r0
     4e0:	8a 95       	dec	r24
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <StepperMove90CW+0x28>
	for(i=0;i<50;i++){
     4e4:	e1 2c       	mov	r14, r1
     4e6:	f1 2c       	mov	r15, r1
     4e8:	18 c0       	rjmp	.+48     	; 0x51a <StepperMove90CW+0x66>
		CurStep ++;
     4ea:	0f 5f       	subi	r16, 0xFF	; 255
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
		if (CurStep > 3){
     4ee:	04 30       	cpi	r16, 0x04	; 4
     4f0:	11 05       	cpc	r17, r1
     4f2:	14 f0       	brlt	.+4      	; 0x4f8 <StepperMove90CW+0x44>
			CurStep = 0;
     4f4:	00 e0       	ldi	r16, 0x00	; 0
     4f6:	10 e0       	ldi	r17, 0x00	; 0
		}
		PORTA = StepArray[CurStep];
     4f8:	f8 01       	movw	r30, r16
     4fa:	ee 0f       	add	r30, r30
     4fc:	ff 1f       	adc	r31, r31
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	8c 0f       	add	r24, r28
     504:	9d 1f       	adc	r25, r29
     506:	e8 0f       	add	r30, r24
     508:	f9 1f       	adc	r31, r25
     50a:	80 81       	ld	r24, Z
     50c:	82 b9       	out	0x02, r24	; 2
		mTimer(11);
     50e:	8b e0       	ldi	r24, 0x0B	; 11
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a5 df       	rcall	.-182    	; 0x45e <mTimer>
void mTimer(int count);

int StepperMove90CW(int CurStep){
	int i;
	int StepArray[4] = {0b00101011, 0b00101101, 0b00110101, 0b00110011};
	for(i=0;i<50;i++){
     514:	9f ef       	ldi	r25, 0xFF	; 255
     516:	e9 1a       	sub	r14, r25
     518:	f9 0a       	sbc	r15, r25
     51a:	82 e3       	ldi	r24, 0x32	; 50
     51c:	e8 16       	cp	r14, r24
     51e:	f1 04       	cpc	r15, r1
     520:	24 f3       	brlt	.-56     	; 0x4ea <StepperMove90CW+0x36>
		}
		PORTA = StepArray[CurStep];
		mTimer(11);
	}
	return(CurStep);
}
     522:	c8 01       	movw	r24, r16
     524:	28 96       	adiw	r28, 0x08	; 8
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	08 95       	ret

0000053e <StepperMove90CCW>:
// turn the stepper 90 degrees in CCW
int StepperMove90CCW(int CurStep){
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	28 97       	sbiw	r28, 0x08	; 8
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	8c 01       	movw	r16, r24
	int i;
	int StepArray[4] = {0b00101011, 0b00101101, 0b00110101, 0b00110011};
     55c:	88 e0       	ldi	r24, 0x08	; 8
     55e:	ea e0       	ldi	r30, 0x0A	; 10
     560:	f2 e0       	ldi	r31, 0x02	; 2
     562:	de 01       	movw	r26, r28
     564:	11 96       	adiw	r26, 0x01	; 1
     566:	01 90       	ld	r0, Z+
     568:	0d 92       	st	X+, r0
     56a:	8a 95       	dec	r24
     56c:	e1 f7       	brne	.-8      	; 0x566 <StepperMove90CCW+0x28>
	for(i=0;i<50;i++){
     56e:	e1 2c       	mov	r14, r1
     570:	f1 2c       	mov	r15, r1
     572:	16 c0       	rjmp	.+44     	; 0x5a0 <StepperMove90CCW+0x62>
		CurStep --;
     574:	01 50       	subi	r16, 0x01	; 1
     576:	11 09       	sbc	r17, r1
		if (CurStep < 0){
     578:	12 f4       	brpl	.+4      	; 0x57e <StepperMove90CCW+0x40>
			CurStep = 3;
     57a:	03 e0       	ldi	r16, 0x03	; 3
     57c:	10 e0       	ldi	r17, 0x00	; 0
		}
		PORTA = StepArray[CurStep];
     57e:	f8 01       	movw	r30, r16
     580:	ee 0f       	add	r30, r30
     582:	ff 1f       	adc	r31, r31
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	8c 0f       	add	r24, r28
     58a:	9d 1f       	adc	r25, r29
     58c:	e8 0f       	add	r30, r24
     58e:	f9 1f       	adc	r31, r25
     590:	80 81       	ld	r24, Z
     592:	82 b9       	out	0x02, r24	; 2
		mTimer(11);
     594:	8b e0       	ldi	r24, 0x0B	; 11
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	62 df       	rcall	.-316    	; 0x45e <mTimer>
}
// turn the stepper 90 degrees in CCW
int StepperMove90CCW(int CurStep){
	int i;
	int StepArray[4] = {0b00101011, 0b00101101, 0b00110101, 0b00110011};
	for(i=0;i<50;i++){
     59a:	9f ef       	ldi	r25, 0xFF	; 255
     59c:	e9 1a       	sub	r14, r25
     59e:	f9 0a       	sbc	r15, r25
     5a0:	82 e3       	ldi	r24, 0x32	; 50
     5a2:	e8 16       	cp	r14, r24
     5a4:	f1 04       	cpc	r15, r1
     5a6:	34 f3       	brlt	.-52     	; 0x574 <StepperMove90CCW+0x36>
		}
		PORTA = StepArray[CurStep];
		mTimer(11);
	}
	return(CurStep);
}
     5a8:	c8 01       	movw	r24, r16
     5aa:	28 96       	adiw	r28, 0x08	; 8
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	08 95       	ret

000005c4 <StepperMove180CW>:

// turn the stepper 180 degrees in CW
int StepperMove180CW(int CurStep){
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	28 97       	sbiw	r28, 0x08	; 8
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	8c 01       	movw	r16, r24
	int i;
	int StepArray[4] = {0b00101011, 0b00101101, 0b00110101, 0b00110011};
     5e2:	88 e0       	ldi	r24, 0x08	; 8
     5e4:	ea e0       	ldi	r30, 0x0A	; 10
     5e6:	f2 e0       	ldi	r31, 0x02	; 2
     5e8:	de 01       	movw	r26, r28
     5ea:	11 96       	adiw	r26, 0x01	; 1
     5ec:	01 90       	ld	r0, Z+
     5ee:	0d 92       	st	X+, r0
     5f0:	8a 95       	dec	r24
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <StepperMove180CW+0x28>
	for(i=0;i<100;i++){
     5f4:	e1 2c       	mov	r14, r1
     5f6:	f1 2c       	mov	r15, r1
     5f8:	18 c0       	rjmp	.+48     	; 0x62a <StepperMove180CW+0x66>
		CurStep ++;
     5fa:	0f 5f       	subi	r16, 0xFF	; 255
     5fc:	1f 4f       	sbci	r17, 0xFF	; 255
		if (CurStep > 3){
     5fe:	04 30       	cpi	r16, 0x04	; 4
     600:	11 05       	cpc	r17, r1
     602:	14 f0       	brlt	.+4      	; 0x608 <StepperMove180CW+0x44>
			CurStep = 0;
     604:	00 e0       	ldi	r16, 0x00	; 0
     606:	10 e0       	ldi	r17, 0x00	; 0
		}
		PORTA = StepArray[CurStep];
     608:	f8 01       	movw	r30, r16
     60a:	ee 0f       	add	r30, r30
     60c:	ff 1f       	adc	r31, r31
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	8c 0f       	add	r24, r28
     614:	9d 1f       	adc	r25, r29
     616:	e8 0f       	add	r30, r24
     618:	f9 1f       	adc	r31, r25
     61a:	80 81       	ld	r24, Z
     61c:	82 b9       	out	0x02, r24	; 2
		mTimer(11);
     61e:	8b e0       	ldi	r24, 0x0B	; 11
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	1d df       	rcall	.-454    	; 0x45e <mTimer>

// turn the stepper 180 degrees in CW
int StepperMove180CW(int CurStep){
	int i;
	int StepArray[4] = {0b00101011, 0b00101101, 0b00110101, 0b00110011};
	for(i=0;i<100;i++){
     624:	9f ef       	ldi	r25, 0xFF	; 255
     626:	e9 1a       	sub	r14, r25
     628:	f9 0a       	sbc	r15, r25
     62a:	84 e6       	ldi	r24, 0x64	; 100
     62c:	e8 16       	cp	r14, r24
     62e:	f1 04       	cpc	r15, r1
     630:	24 f3       	brlt	.-56     	; 0x5fa <StepperMove180CW+0x36>
		}
		PORTA = StepArray[CurStep];
		mTimer(11);
	}
	return(CurStep);
}
     632:	c8 01       	movw	r24, r16
     634:	28 96       	adiw	r28, 0x08	; 8
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	ff 90       	pop	r15
     64a:	ef 90       	pop	r14
     64c:	08 95       	ret

0000064e <stepColor>:
int stepColor(int incomingClr, int currentClr, int CurStep){
	int stepDelay = 11;
	
	//Calculate rotation variable
	int rotateVar;
	rotateVar = incomingClr - currentClr;
     64e:	86 1b       	sub	r24, r22
     650:	97 0b       	sbc	r25, r23

	//Calculate necessary rotation
	switch(rotateVar) {
     652:	8f 3f       	cpi	r24, 0xFF	; 255
     654:	2f ef       	ldi	r18, 0xFF	; 255
     656:	92 07       	cpc	r25, r18
     658:	c1 f0       	breq	.+48     	; 0x68a <stepColor+0x3c>
     65a:	3c f4       	brge	.+14     	; 0x66a <stepColor+0x1c>
     65c:	8d 3f       	cpi	r24, 0xFD	; 253
     65e:	2f ef       	ldi	r18, 0xFF	; 255
     660:	92 07       	cpc	r25, r18
     662:	79 f0       	breq	.+30     	; 0x682 <stepColor+0x34>
     664:	02 96       	adiw	r24, 0x02	; 2
     666:	e9 f0       	breq	.+58     	; 0x6a2 <stepColor+0x54>
     668:	1f c0       	rjmp	.+62     	; 0x6a8 <stepColor+0x5a>
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	91 05       	cpc	r25, r1
     66e:	a9 f0       	breq	.+42     	; 0x69a <stepColor+0x4c>
     670:	83 30       	cpi	r24, 0x03	; 3
     672:	91 05       	cpc	r25, r1
     674:	71 f0       	breq	.+28     	; 0x692 <stepColor+0x44>
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	b9 f4       	brne	.+46     	; 0x6a8 <stepColor+0x5a>

		case 1  :
		//CCW 90 degree turn
		CurStep = StepperMove90CCW(CurStep);
     67a:	ca 01       	movw	r24, r20
     67c:	60 df       	rcall	.-320    	; 0x53e <StepperMove90CCW>
     67e:	ac 01       	movw	r20, r24
		break;
     680:	13 c0       	rjmp	.+38     	; 0x6a8 <stepColor+0x5a>
		
		case -3  :
		//CCW 90 degree turn
		CurStep = StepperMove90CCW(CurStep);
     682:	ca 01       	movw	r24, r20
     684:	5c df       	rcall	.-328    	; 0x53e <StepperMove90CCW>
     686:	ac 01       	movw	r20, r24
		break;
		
		case -1  :
		//CW 90 degree turn
		CurStep = StepperMove90CW(CurStep);
     688:	0f c0       	rjmp	.+30     	; 0x6a8 <stepColor+0x5a>
     68a:	ca 01       	movw	r24, r20
     68c:	13 df       	rcall	.-474    	; 0x4b4 <StepperMove90CW>
		break;
     68e:	ac 01       	movw	r20, r24
		
		case 3  :
		//CW 90 degree turn
		CurStep = StepperMove90CW(CurStep);
     690:	0b c0       	rjmp	.+22     	; 0x6a8 <stepColor+0x5a>
     692:	ca 01       	movw	r24, r20
     694:	0f df       	rcall	.-482    	; 0x4b4 <StepperMove90CW>
		break;
     696:	ac 01       	movw	r20, r24
		
		case 2  :
		//CCW 180 degree turn
		CurStep = StepperMove180CW(CurStep);
     698:	07 c0       	rjmp	.+14     	; 0x6a8 <stepColor+0x5a>
     69a:	ca 01       	movw	r24, r20
     69c:	93 df       	rcall	.-218    	; 0x5c4 <StepperMove180CW>
		break;
     69e:	ac 01       	movw	r20, r24
		
		case -2  :
		//CCW 180 degree turn
		CurStep = StepperMove180CW(CurStep);
     6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <stepColor+0x5a>
     6a2:	ca 01       	movw	r24, r20
     6a4:	8f df       	rcall	.-226    	; 0x5c4 <StepperMove180CW>
     6a6:	ac 01       	movw	r20, r24
		break;
	}
	return(CurStep);
     6a8:	ca 01       	movw	r24, r20
     6aa:	08 95       	ret

000006ac <rampTimer>:


void rampTimer(int count){
	
	//	prescaling to 8 MHz
	CLKPR = 0x80;
     6ac:	e1 e6       	ldi	r30, 0x61	; 97
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	20 e8       	ldi	r18, 0x80	; 128
     6b2:	20 83       	st	Z, r18
	CLKPR = 0x01;
     6b4:	21 e0       	ldi	r18, 0x01	; 1
     6b6:	20 83       	st	Z, r18
	
	int i;
	i = 0;

	TCCR3B |= _BV(WGM32);
     6b8:	e1 e9       	ldi	r30, 0x91	; 145
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	20 81       	ld	r18, Z
     6be:	28 60       	ori	r18, 0x08	; 8
     6c0:	20 83       	st	Z, r18
	TCCR3B |= _BV(CS32);
     6c2:	20 81       	ld	r18, Z
     6c4:	24 60       	ori	r18, 0x04	; 4
     6c6:	20 83       	st	Z, r18
	
	TCNT3 = 0x0000;
     6c8:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     6cc:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	
	OCR3A |= 0x03E8;
     6d0:	e8 e9       	ldi	r30, 0x98	; 152
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	20 81       	ld	r18, Z
     6d6:	31 81       	ldd	r19, Z+1	; 0x01
     6d8:	28 6e       	ori	r18, 0xE8	; 232
     6da:	33 60       	ori	r19, 0x03	; 3
     6dc:	31 83       	std	Z+1, r19	; 0x01
     6de:	20 83       	st	Z, r18

	TIFR3 |= _BV(OCF3A);
     6e0:	28 b3       	in	r18, 0x18	; 24
     6e2:	22 60       	ori	r18, 0x02	; 2
     6e4:	28 bb       	out	0x18, r18	; 24
	//	prescaling to 8 MHz
	CLKPR = 0x80;
	CLKPR = 0x01;
	
	int i;
	i = 0;
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
	
	OCR3A |= 0x03E8;

	TIFR3 |= _BV(OCF3A);
	
	while (i < count){
     6ea:	07 c0       	rjmp	.+14     	; 0x6fa <rampTimer+0x4e>
		if ((TIFR3 & 0x02) == 0x02){
     6ec:	c1 9b       	sbis	0x18, 1	; 24
     6ee:	05 c0       	rjmp	.+10     	; 0x6fa <rampTimer+0x4e>
			TIFR3 |= _BV(OCF3A);
     6f0:	48 b3       	in	r20, 0x18	; 24
     6f2:	42 60       	ori	r20, 0x02	; 2
     6f4:	48 bb       	out	0x18, r20	; 24
			i++;
     6f6:	2f 5f       	subi	r18, 0xFF	; 255
     6f8:	3f 4f       	sbci	r19, 0xFF	; 255
	
	OCR3A |= 0x03E8;

	TIFR3 |= _BV(OCF3A);
	
	while (i < count){
     6fa:	28 17       	cp	r18, r24
     6fc:	39 07       	cpc	r19, r25
     6fe:	b4 f3       	brlt	.-20     	; 0x6ec <rampTimer+0x40>
			TIFR3 |= _BV(OCF3A);
			i++;
		}
	}
	return;
     700:	08 95       	ret

00000702 <__vector_3>:
	}
}// end main


//	hall effect sensor interrupt used to initialize plate at origin
ISR(INT2_vect){
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	0f 92       	push	r0
     70a:	11 24       	eor	r1, r1
	//	when hall effect sensor at origin, set flag to zero. end stepper init
	HE_flag = 0;
     70c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <HE_flag+0x1>
     710:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <HE_flag>
}
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <__vector_2>:

//	ir sensor interrupt for color sensor to read and add to linked queue
ISR(INT1_vect){ //Whenever interrupt is triggered, system will immediately jump to this
     71e:	1f 92       	push	r1
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	0f 92       	push	r0
     726:	11 24       	eor	r1, r1
     728:	0b b6       	in	r0, 0x3b	; 59
     72a:	0f 92       	push	r0
     72c:	2f 93       	push	r18
     72e:	3f 93       	push	r19
     730:	4f 93       	push	r20
     732:	5f 93       	push	r21
     734:	6f 93       	push	r22
     736:	7f 93       	push	r23
     738:	8f 93       	push	r24
     73a:	9f 93       	push	r25
     73c:	af 93       	push	r26
     73e:	bf 93       	push	r27
     740:	ef 93       	push	r30
     742:	ff 93       	push	r31
	// init new link
	
	// if first link condition
	if(isEmpty(&head))
     744:	8a ee       	ldi	r24, 0xEA	; 234
     746:	92 e0       	ldi	r25, 0x02	; 2
     748:	38 dd       	rcall	.-1424   	; 0x1ba <isEmpty>
     74a:	88 23       	and	r24, r24
     74c:	29 f0       	breq	.+10     	; 0x758 <__vector_2+0x3a>
	{setup(&head, &tail);}
     74e:	66 ee       	ldi	r22, 0xE6	; 230
     750:	72 e0       	ldi	r23, 0x02	; 2
     752:	8a ee       	ldi	r24, 0xEA	; 234
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	e7 dc       	rcall	.-1586   	; 0x126 <setup>
	
	// else
	initLink(&newLink);
     758:	86 eb       	ldi	r24, 0xB6	; 182
     75a:	93 e0       	ldi	r25, 0x03	; 3
     75c:	eb dc       	rcall	.-1578   	; 0x134 <initLink>
	enqueue(&head, &tail, &newLink);
     75e:	46 eb       	ldi	r20, 0xB6	; 182
     760:	53 e0       	ldi	r21, 0x03	; 3
     762:	66 ee       	ldi	r22, 0xE6	; 230
     764:	72 e0       	ldi	r23, 0x02	; 2
     766:	8a ee       	ldi	r24, 0xEA	; 234
     768:	92 e0       	ldi	r25, 0x02	; 2
	
	
	ClrFr = ClrDet(); // intake new color
     76a:	f2 dc       	rcall	.-1564   	; 0x150 <enqueue>
     76c:	2e dd       	rcall	.-1444   	; 0x1ca <ClrDet>
     76e:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <ClrFr+0x1>
     772:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <ClrFr>
	if (ClrFr == 0b10000000)	// red
     776:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <ClrFr>
     77a:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <ClrFr+0x1>
     77e:	80 38       	cpi	r24, 0x80	; 128
     780:	91 05       	cpc	r25, r1
     782:	29 f4       	brne	.+10     	; 0x78e <__vector_2+0x70>
	{
		incomingClr = 0;
     784:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <incomingClr+0x1>
     788:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <incomingClr>
     78c:	27 c0       	rjmp	.+78     	; 0x7dc <__vector_2+0xbe>
	}
	else if (ClrFr == 0b01000000)	// yellow
     78e:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <ClrFr>
     792:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <ClrFr+0x1>
     796:	80 34       	cpi	r24, 0x40	; 64
     798:	91 05       	cpc	r25, r1
     79a:	39 f4       	brne	.+14     	; 0x7aa <__vector_2+0x8c>
	{
		incomingClr = 3;
     79c:	83 e0       	ldi	r24, 0x03	; 3
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <incomingClr+0x1>
     7a4:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <incomingClr>
     7a8:	19 c0       	rjmp	.+50     	; 0x7dc <__vector_2+0xbe>
		
	}
	else if (ClrFr == 0b00100000)	// green
     7aa:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <ClrFr>
     7ae:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <ClrFr+0x1>
     7b2:	80 97       	sbiw	r24, 0x20	; 32
     7b4:	39 f4       	brne	.+14     	; 0x7c4 <__vector_2+0xa6>
	{
		incomingClr = 1;
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <incomingClr+0x1>
     7be:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <incomingClr>
     7c2:	0c c0       	rjmp	.+24     	; 0x7dc <__vector_2+0xbe>
	}
	else if (ClrFr == 0b00010000)	// blue
     7c4:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <ClrFr>
     7c8:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <ClrFr+0x1>
     7cc:	40 97       	sbiw	r24, 0x10	; 16
     7ce:	31 f4       	brne	.+12     	; 0x7dc <__vector_2+0xbe>
	{
		incomingClr = 2;
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <incomingClr+0x1>
     7d8:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <incomingClr>
	}
	
	//	for debugging color sensor reads
	PORTC = incomingClr+1;
     7dc:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <incomingClr>
     7e0:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <incomingClr+0x1>
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
     7e6:	88 b9       	out	0x08, r24	; 8

	newLink->e.itemCode = incomingClr; // new
     7e8:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <newLink>
     7ec:	f0 91 b7 03 	lds	r31, 0x03B7	; 0x8003b7 <newLink+0x1>
     7f0:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <incomingClr>
     7f4:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <incomingClr+0x1>
     7f8:	80 83       	st	Z, r24
	newLink->e.stage = history[idx]; // old
     7fa:	a0 91 b6 03 	lds	r26, 0x03B6	; 0x8003b6 <newLink>
     7fe:	b0 91 b7 03 	lds	r27, 0x03B7	; 0x8003b7 <newLink+0x1>
     802:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <idx>
     806:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <idx+0x1>
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	e2 5e       	subi	r30, 0xE2	; 226
     810:	fd 4f       	sbci	r31, 0xFD	; 253
     812:	80 81       	ld	r24, Z
     814:	91 81       	ldd	r25, Z+1	; 0x01
     816:	11 96       	adiw	r26, 0x01	; 1
     818:	8c 93       	st	X, r24

	idx++;
     81a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <idx>
     81e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <idx+0x1>
     822:	01 96       	adiw	r24, 0x01	; 1
     824:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <idx+0x1>
     828:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <idx>
	history[idx] = incomingClr;	//	on conveyor array
     82c:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <idx>
     830:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <idx+0x1>
     834:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <incomingClr>
     838:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <incomingClr+0x1>
     83c:	ee 0f       	add	r30, r30
     83e:	ff 1f       	adc	r31, r31
     840:	e2 5e       	subi	r30, 0xE2	; 226
     842:	fd 4f       	sbci	r31, 0xFD	; 253
     844:	91 83       	std	Z+1, r25	; 0x01
     846:	80 83       	st	Z, r24
}
     848:	ff 91       	pop	r31
     84a:	ef 91       	pop	r30
     84c:	bf 91       	pop	r27
     84e:	af 91       	pop	r26
     850:	9f 91       	pop	r25
     852:	8f 91       	pop	r24
     854:	7f 91       	pop	r23
     856:	6f 91       	pop	r22
     858:	5f 91       	pop	r21
     85a:	4f 91       	pop	r20
     85c:	3f 91       	pop	r19
     85e:	2f 91       	pop	r18
     860:	0f 90       	pop	r0
     862:	0b be       	out	0x3b, r0	; 59
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	0f 90       	pop	r0
     86a:	1f 90       	pop	r1
     86c:	18 95       	reti

0000086e <__vector_1>:

//	ir sensor interrupt to stop/start dc so stepper matches color
ISR(INT0_vect){
     86e:	1f 92       	push	r1
     870:	0f 92       	push	r0
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	0f 92       	push	r0
     876:	11 24       	eor	r1, r1
     878:	0b b6       	in	r0, 0x3b	; 59
     87a:	0f 92       	push	r0
     87c:	2f 93       	push	r18
     87e:	3f 93       	push	r19
     880:	4f 93       	push	r20
     882:	5f 93       	push	r21
     884:	6f 93       	push	r22
     886:	7f 93       	push	r23
     888:	8f 93       	push	r24
     88a:	9f 93       	push	r25
     88c:	af 93       	push	r26
     88e:	bf 93       	push	r27
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ef 93       	push	r30
     896:	ff 93       	push	r31
	eTest = firstValue(&head);
     898:	8a ee       	ldi	r24, 0xEA	; 234
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	88 dc       	rcall	.-1776   	; 0x1ae <firstValue>
     89e:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <eTest+0x1>
     8a2:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <eTest>

	//	stop dc
	OCR0A = 0;
     8a6:	17 bc       	out	0x27, r1	; 39

	//	Call Stepper Rotation Function
	CurStep = stepColor(eTest.itemCode,eTest.stage, CurStep);
     8a8:	40 91 b8 03 	lds	r20, 0x03B8	; 0x8003b8 <CurStep>
     8ac:	50 91 b9 03 	lds	r21, 0x03B9	; 0x8003b9 <CurStep+0x1>
     8b0:	c8 e1       	ldi	r28, 0x18	; 24
     8b2:	d2 e0       	ldi	r29, 0x02	; 2
     8b4:	69 81       	ldd	r22, Y+1	; 0x01
     8b6:	88 81       	ld	r24, Y
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	c8 de       	rcall	.-624    	; 0x64e <stepColor>
     8be:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <CurStep+0x1>
     8c2:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <CurStep>
	//	remove block pushed to plate and store new color in plate array
	plate[idxPlate] = eTest.itemCode;	//	plate array
     8c6:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <idxPlate>
     8ca:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <idxPlate+0x1>
     8ce:	88 81       	ld	r24, Y
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	ee 0f       	add	r30, r30
     8d4:	ff 1f       	adc	r31, r31
     8d6:	e4 51       	subi	r30, 0x14	; 20
     8d8:	fd 4f       	sbci	r31, 0xFD	; 253
     8da:	91 83       	std	Z+1, r25	; 0x01
     8dc:	80 83       	st	Z, r24
	idxPlate++;
     8de:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <idxPlate>
     8e2:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <idxPlate+0x1>
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <idxPlate+0x1>
     8ec:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <idxPlate>
	dequeue(&head, &tail, &rtnLink);
     8f0:	4c e1       	ldi	r20, 0x1C	; 28
     8f2:	52 e0       	ldi	r21, 0x02	; 2
     8f4:	66 ee       	ldi	r22, 0xE6	; 230
     8f6:	72 e0       	ldi	r23, 0x02	; 2
     8f8:	8a ee       	ldi	r24, 0xEA	; 234
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	47 dc       	rcall	.-1906   	; 0x18c <dequeue>
	
	//	restart dc
	OCR0A = (dutyCycle/100.0)*255.0;
     8fe:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <dutyCycle>
     902:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <dutyCycle+0x1>
     906:	07 2e       	mov	r0, r23
     908:	00 0c       	add	r0, r0
     90a:	88 0b       	sbc	r24, r24
     90c:	99 0b       	sbc	r25, r25
     90e:	25 d2       	rcall	.+1098   	; 0xd5a <__floatsisf>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	48 ec       	ldi	r20, 0xC8	; 200
     916:	52 e4       	ldi	r21, 0x42	; 66
     918:	8a d1       	rcall	.+788    	; 0xc2e <__divsf3>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	4f e7       	ldi	r20, 0x7F	; 127
     920:	53 e4       	ldi	r21, 0x43	; 67
     922:	a7 d2       	rcall	.+1358   	; 0xe72 <__mulsf3>
     924:	ec d1       	rcall	.+984    	; 0xcfe <__fixunssfsi>
     926:	67 bd       	out	0x27, r22	; 39
}
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	bf 91       	pop	r27
     932:	af 91       	pop	r26
     934:	9f 91       	pop	r25
     936:	8f 91       	pop	r24
     938:	7f 91       	pop	r23
     93a:	6f 91       	pop	r22
     93c:	5f 91       	pop	r21
     93e:	4f 91       	pop	r20
     940:	3f 91       	pop	r19
     942:	2f 91       	pop	r18
     944:	0f 90       	pop	r0
     946:	0b be       	out	0x3b, r0	; 59
     948:	0f 90       	pop	r0
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	0f 90       	pop	r0
     94e:	1f 90       	pop	r1
     950:	18 95       	reti

00000952 <__vector_4>:

//	pause function interrupt
ISR(INT3_vect){
     952:	1f 92       	push	r1
     954:	0f 92       	push	r0
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	0f 92       	push	r0
     95a:	11 24       	eor	r1, r1
     95c:	0b b6       	in	r0, 0x3b	; 59
     95e:	0f 92       	push	r0
     960:	2f 93       	push	r18
     962:	3f 93       	push	r19
     964:	4f 93       	push	r20
     966:	5f 93       	push	r21
     968:	6f 93       	push	r22
     96a:	7f 93       	push	r23
     96c:	8f 93       	push	r24
     96e:	9f 93       	push	r25
     970:	af 93       	push	r26
     972:	bf 93       	push	r27
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	ef 93       	push	r30
     97a:	ff 93       	push	r31
	//	stop dc
	OCR0A = 0;
     97c:	17 bc       	out	0x27, r1	; 39
	
	int j;
	PORTC = 0b11110000;	//	flash before on conveyor
     97e:	80 ef       	ldi	r24, 0xF0	; 240
     980:	88 b9       	out	0x08, r24	; 8
	mTimer(3000);	
     982:	88 eb       	ldi	r24, 0xB8	; 184
     984:	9b e0       	ldi	r25, 0x0B	; 11
     986:	6b dd       	rcall	.-1322   	; 0x45e <mTimer>
	for (j = idxPlate; j < idx; j++){
     988:	c0 91 14 02 	lds	r28, 0x0214	; 0x800214 <idxPlate>
     98c:	d0 91 15 02 	lds	r29, 0x0215	; 0x800215 <idxPlate+0x1>
     990:	11 c0       	rjmp	.+34     	; 0x9b4 <__vector_4+0x62>
		PORTC = history[j]+1;
     992:	fe 01       	movw	r30, r28
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	e2 5e       	subi	r30, 0xE2	; 226
     99a:	fd 4f       	sbci	r31, 0xFD	; 253
     99c:	80 81       	ld	r24, Z
     99e:	91 81       	ldd	r25, Z+1	; 0x01
     9a0:	8f 5f       	subi	r24, 0xFF	; 255
     9a2:	88 b9       	out	0x08, r24	; 8
		mTimer(2000);
     9a4:	80 ed       	ldi	r24, 0xD0	; 208
     9a6:	97 e0       	ldi	r25, 0x07	; 7
     9a8:	5a dd       	rcall	.-1356   	; 0x45e <mTimer>
		PORTC = 0;
     9aa:	18 b8       	out	0x08, r1	; 8
		mTimer(250);	
     9ac:	8a ef       	ldi	r24, 0xFA	; 250
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	56 dd       	rcall	.-1364   	; 0x45e <mTimer>
	OCR0A = 0;
	
	int j;
	PORTC = 0b11110000;	//	flash before on conveyor
	mTimer(3000);	
	for (j = idxPlate; j < idx; j++){
     9b2:	21 96       	adiw	r28, 0x01	; 1
     9b4:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <idx>
     9b8:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <idx+0x1>
     9bc:	c8 17       	cp	r28, r24
     9be:	d9 07       	cpc	r29, r25
     9c0:	44 f3       	brlt	.-48     	; 0x992 <__vector_4+0x40>
		mTimer(250);	
	}
	
	
	int k;
	PORTC = 0b00001111;	//	flash before on plate
     9c2:	8f e0       	ldi	r24, 0x0F	; 15
	mTimer(3000);
     9c4:	88 b9       	out	0x08, r24	; 8
     9c6:	88 eb       	ldi	r24, 0xB8	; 184
     9c8:	9b e0       	ldi	r25, 0x0B	; 11
     9ca:	49 dd       	rcall	.-1390   	; 0x45e <mTimer>
	for (k = 0; k < idxPlate; k++){
     9cc:	c0 e0       	ldi	r28, 0x00	; 0
     9ce:	d0 e0       	ldi	r29, 0x00	; 0
     9d0:	11 c0       	rjmp	.+34     	; 0x9f4 <__vector_4+0xa2>
		PORTC = plate[k]+1;
     9d2:	fe 01       	movw	r30, r28
     9d4:	ee 0f       	add	r30, r30
     9d6:	ff 1f       	adc	r31, r31
     9d8:	e4 51       	subi	r30, 0x14	; 20
     9da:	fd 4f       	sbci	r31, 0xFD	; 253
     9dc:	80 81       	ld	r24, Z
     9de:	91 81       	ldd	r25, Z+1	; 0x01
     9e0:	8f 5f       	subi	r24, 0xFF	; 255
		mTimer(2000);
     9e2:	88 b9       	out	0x08, r24	; 8
     9e4:	80 ed       	ldi	r24, 0xD0	; 208
     9e6:	97 e0       	ldi	r25, 0x07	; 7
		PORTC = 0;
     9e8:	3a dd       	rcall	.-1420   	; 0x45e <mTimer>
		mTimer(250);
     9ea:	18 b8       	out	0x08, r1	; 8
     9ec:	8a ef       	ldi	r24, 0xFA	; 250
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	36 dd       	rcall	.-1428   	; 0x45e <mTimer>
	
	
	int k;
	PORTC = 0b00001111;	//	flash before on plate
	mTimer(3000);
	for (k = 0; k < idxPlate; k++){
     9f2:	21 96       	adiw	r28, 0x01	; 1
     9f4:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <idxPlate>
     9f8:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <idxPlate+0x1>
     9fc:	c8 17       	cp	r28, r24
     9fe:	d9 07       	cpc	r29, r25
     a00:	44 f3       	brlt	.-48     	; 0x9d2 <__vector_4+0x80>
		PORTC = 0;
		mTimer(250);
	}
	
	//	restart dc
	OCR0A = (dutyCycle/100.0)*255.0;
     a02:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <dutyCycle>
     a06:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <dutyCycle+0x1>
     a0a:	07 2e       	mov	r0, r23
     a0c:	00 0c       	add	r0, r0
     a0e:	88 0b       	sbc	r24, r24
     a10:	99 0b       	sbc	r25, r25
     a12:	a3 d1       	rcall	.+838    	; 0xd5a <__floatsisf>
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	48 ec       	ldi	r20, 0xC8	; 200
     a1a:	52 e4       	ldi	r21, 0x42	; 66
     a1c:	08 d1       	rcall	.+528    	; 0xc2e <__divsf3>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	4f e7       	ldi	r20, 0x7F	; 127
     a24:	53 e4       	ldi	r21, 0x43	; 67
     a26:	25 d2       	rcall	.+1098   	; 0xe72 <__mulsf3>
     a28:	6a d1       	rcall	.+724    	; 0xcfe <__fixunssfsi>
     a2a:	67 bd       	out	0x27, r22	; 39
}
     a2c:	ff 91       	pop	r31
     a2e:	ef 91       	pop	r30
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	bf 91       	pop	r27
     a36:	af 91       	pop	r26
     a38:	9f 91       	pop	r25
     a3a:	8f 91       	pop	r24
     a3c:	7f 91       	pop	r23
     a3e:	6f 91       	pop	r22
     a40:	5f 91       	pop	r21
     a42:	4f 91       	pop	r20
     a44:	3f 91       	pop	r19
     a46:	2f 91       	pop	r18
     a48:	0f 90       	pop	r0
     a4a:	0b be       	out	0x3b, r0	; 59
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <initializeStepper>:


//Stepper Initialization Function
void initializeStepper(){
	int i = 0;
	while(HE_flag){
     a56:	14 c0       	rjmp	.+40     	; 0xa80 <initializeStepper+0x2a>
		PORTA = 0b00101011; //step 1
     a58:	8b e2       	ldi	r24, 0x2B	; 43
     a5a:	82 b9       	out	0x02, r24	; 2
		mTimer(11);
     a5c:	8b e0       	ldi	r24, 0x0B	; 11
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	fe dc       	rcall	.-1540   	; 0x45e <mTimer>
		PORTA = 0b00101101; //step 2
     a62:	8d e2       	ldi	r24, 0x2D	; 45
     a64:	82 b9       	out	0x02, r24	; 2
		mTimer(11);
     a66:	8b e0       	ldi	r24, 0x0B	; 11
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	f9 dc       	rcall	.-1550   	; 0x45e <mTimer>
		PORTA = 0b00110101; //step 3
     a6c:	85 e3       	ldi	r24, 0x35	; 53
     a6e:	82 b9       	out	0x02, r24	; 2
		mTimer(11);
     a70:	8b e0       	ldi	r24, 0x0B	; 11
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	f4 dc       	rcall	.-1560   	; 0x45e <mTimer>
		PORTA = 0b00110011; //step 4
     a76:	83 e3       	ldi	r24, 0x33	; 51
		mTimer(11);
     a78:	82 b9       	out	0x02, r24	; 2
     a7a:	8b e0       	ldi	r24, 0x0B	; 11
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	ef dc       	rcall	.-1570   	; 0x45e <mTimer>


//Stepper Initialization Function
void initializeStepper(){
	int i = 0;
	while(HE_flag){
     a80:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <HE_flag>
     a84:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <HE_flag+0x1>
     a88:	89 2b       	or	r24, r25
     a8a:	31 f7       	brne	.-52     	; 0xa58 <initializeStepper+0x2>
		PORTA = 0b00110011; //step 4
		mTimer(11);
		}
	return;
	//}
}//end Initialization Function
     a8c:	08 95       	ret

00000a8e <main>:

volatile int rampFlag = 0;


//Main Function
void main(){
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
	if (rampFlag == 0){
     a92:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     a96:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__data_end+0x1>
     a9a:	89 2b       	or	r24, r25
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <main+0x12>
     a9e:	6e c0       	rjmp	.+220    	; 0xb7c <main+0xee>
		//DC Motor PWM Code
		CLKPR = 0x80;
     aa0:	e1 e6       	ldi	r30, 0x61	; 97
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	c0 e8       	ldi	r28, 0x80	; 128
     aa6:	c0 83       	st	Z, r28
		CLKPR = 0x01;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 83       	st	Z, r24
	
	
	
		//STEPPER MOTOR CODE
		//Set Data Direction Registers for stepper motor
		DDRC = 0xFF; //set portC to output (LED's)
     aac:	8f ef       	ldi	r24, 0xFF	; 255
     aae:	87 b9       	out	0x07, r24	; 7
		DDRA = 0xff; //set all pins in portA to output
     ab0:	81 b9       	out	0x01, r24	; 1
		DDRH = 0b00000000; //set all pins in port H to input. this is where Hall effect sensor is input (pin7)
     ab2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
		DDRB=0x00;
     ab6:	14 b8       	out	0x04, r1	; 4
	
		//After initialization, stepper will be on red. history = 0
		history[idx] = 0;
     ab8:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <idx>
     abc:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <idx+0x1>
     ac0:	ee 0f       	add	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	e2 5e       	subi	r30, 0xE2	; 226
     ac6:	fd 4f       	sbci	r31, 0xFD	; 253
     ac8:	11 82       	std	Z+1, r1	; 0x01
     aca:	10 82       	st	Z, r1
	
	
	
		//IR Sensor Code-------------------------------------------------------------------------------------------------------------------------------------
		//Set data direction registers
		DDRC = 0b11111111; //port C to output
     acc:	87 b9       	out	0x07, r24	; 7
		DDRD = 0b00000000; //port D to input
     ace:	1a b8       	out	0x0a, r1	; 10




		cli();// disable all of the interrupt	
     ad0:	f8 94       	cli
		
		// config the external interrupt
		EIMSK |= (_BV(INT2)); // enable INT2 (hall effect)
     ad2:	8d b3       	in	r24, 0x1d	; 29
     ad4:	84 60       	ori	r24, 0x04	; 4
     ad6:	8d bb       	out	0x1d, r24	; 29
		EICRA |= (_BV(ISC21)); // falling edge interrupt
     ad8:	e9 e6       	ldi	r30, 0x69	; 105
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	80 81       	ld	r24, Z
     ade:	80 62       	ori	r24, 0x20	; 32
     ae0:	80 83       	st	Z, r24
	
		EIMSK |= (_BV(INT1)); // enable INT1 (ir/color sensor combo)
     ae2:	8d b3       	in	r24, 0x1d	; 29
     ae4:	82 60       	ori	r24, 0x02	; 2
     ae6:	8d bb       	out	0x1d, r24	; 29
		EICRA |= (_BV(ISC11)); // falling edge interrupt
     ae8:	80 81       	ld	r24, Z
     aea:	88 60       	ori	r24, 0x08	; 8
     aec:	80 83       	st	Z, r24
	
		EIMSK |= (_BV(INT0));	// ir/dc/stepper combo
     aee:	8d b3       	in	r24, 0x1d	; 29
     af0:	81 60       	ori	r24, 0x01	; 1
     af2:	8d bb       	out	0x1d, r24	; 29
		EICRA |= (_BV(ISC01));
     af4:	80 81       	ld	r24, Z
     af6:	82 60       	ori	r24, 0x02	; 2
     af8:	80 83       	st	Z, r24
	
		EIMSK |= (_BV(INT3)); // enable INT3 (pause function)
     afa:	8d b3       	in	r24, 0x1d	; 29
     afc:	88 60       	ori	r24, 0x08	; 8
     afe:	8d bb       	out	0x1d, r24	; 29
		EICRA |= (_BV(ISC31)); // falling edge interrupt
     b00:	80 81       	ld	r24, Z
     b02:	80 68       	ori	r24, 0x80	; 128
     b04:	80 83       	st	Z, r24
	
		EIMSK |= (_BV(INT4)); // enable INT4 (rampdown function)
     b06:	8d b3       	in	r24, 0x1d	; 29
     b08:	80 61       	ori	r24, 0x10	; 16
     b0a:	8d bb       	out	0x1d, r24	; 29
		EICRA |= (_BV(ISC41)); // falling edge interrupt
     b0c:	80 81       	ld	r24, Z
     b0e:	82 60       	ori	r24, 0x02	; 2
     b10:	80 83       	st	Z, r24

		sei();// enable all of the interrupt
     b12:	78 94       	sei



	
		initializeStepper();
     b14:	a0 df       	rcall	.-192    	; 0xa56 <initializeStepper>
		CurStep = 3;
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <CurStep+0x1>
     b1e:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <CurStep>
	
	
		DDRB = (1 << PB7); //sets OC0A to output pin
     b22:	c4 b9       	out	0x04, r28	; 4
		TCCR0A |= _BV(WGM01) | _BV(WGM00);// choose fast PWM mode P126, Mode 3 P128
     b24:	84 b5       	in	r24, 0x24	; 36
     b26:	83 60       	ori	r24, 0x03	; 3
     b28:	84 bd       	out	0x24, r24	; 36
	
								//*setting bit 1 of TIMSK1 to 1 will enable the timer interrupt to function when the OCF1A flag is set in TIFR1*
		TCCR0A |= _BV(COM0A1);
     b2a:	84 b5       	in	r24, 0x24	; 36
     b2c:	80 68       	ori	r24, 0x80	; 128
     b2e:	84 bd       	out	0x24, r24	; 36
		TCCR0B |= _BV(CS01); //scales clock
     b30:	85 b5       	in	r24, 0x25	; 37
     b32:	82 60       	ori	r24, 0x02	; 2
     b34:	85 bd       	out	0x25, r24	; 37
		OCR0A = (dutyCycle/100.0)*255.0; //output compare register value that the pwm will reset at. duty cycle defines percentage of max value (255)
     b36:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <dutyCycle>
     b3a:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <dutyCycle+0x1>
     b3e:	07 2e       	mov	r0, r23
     b40:	00 0c       	add	r0, r0
     b42:	88 0b       	sbc	r24, r24
     b44:	99 0b       	sbc	r25, r25
     b46:	09 d1       	rcall	.+530    	; 0xd5a <__floatsisf>
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	48 ec       	ldi	r20, 0xC8	; 200
     b4e:	52 e4       	ldi	r21, 0x42	; 66
     b50:	6e d0       	rcall	.+220    	; 0xc2e <__divsf3>
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	4f e7       	ldi	r20, 0x7F	; 127
     b58:	53 e4       	ldi	r21, 0x43	; 67
     b5a:	8b d1       	rcall	.+790    	; 0xe72 <__mulsf3>
     b5c:	d0 d0       	rcall	.+416    	; 0xcfe <__fixunssfsi>
     b5e:	67 bd       	out	0x27, r22	; 39
		//End DC Motor PWM Code
	
	
		rtnLink = NULL;
     b60:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <rtnLink+0x1>
     b64:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <rtnLink>
		newLink = NULL;
     b68:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <newLink+0x1>
     b6c:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <newLink>
		setup(&head, &tail);
     b70:	66 ee       	ldi	r22, 0xE6	; 230
     b72:	72 e0       	ldi	r23, 0x02	; 2
     b74:	8a ee       	ldi	r24, 0xEA	; 234
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	d6 da       	rcall	.-2644   	; 0x126 <setup>
	
		while (1){
		}
	}	//	end of if statement
	else{
		rampTimer(150); // 350
     b7a:	ff cf       	rjmp	.-2      	; 0xb7a <main+0xec>
     b7c:	86 e9       	ldi	r24, 0x96	; 150
     b7e:	90 e0       	ldi	r25, 0x00	; 0
		
		//	stop dc
		OCR0A = 0;
     b80:	95 dd       	rcall	.-1238   	; 0x6ac <rampTimer>

		int k;
		PORTC = 0b00110011;	//	flash before on plate
     b82:	17 bc       	out	0x27, r1	; 39
     b84:	83 e3       	ldi	r24, 0x33	; 51
		mTimer(3000);
     b86:	88 b9       	out	0x08, r24	; 8
     b88:	88 eb       	ldi	r24, 0xB8	; 184
     b8a:	9b e0       	ldi	r25, 0x0B	; 11
     b8c:	68 dc       	rcall	.-1840   	; 0x45e <mTimer>
		for (k = 0; k < idxPlate; k++){
     b8e:	c0 e0       	ldi	r28, 0x00	; 0
     b90:	d0 e0       	ldi	r29, 0x00	; 0
     b92:	10 c0       	rjmp	.+32     	; 0xbb4 <main+0x126>
			PORTC = plate[k];
     b94:	fe 01       	movw	r30, r28
     b96:	ee 0f       	add	r30, r30
     b98:	ff 1f       	adc	r31, r31
     b9a:	e4 51       	subi	r30, 0x14	; 20
     b9c:	fd 4f       	sbci	r31, 0xFD	; 253
     b9e:	80 81       	ld	r24, Z
			mTimer(2000);
     ba0:	91 81       	ldd	r25, Z+1	; 0x01
     ba2:	88 b9       	out	0x08, r24	; 8
     ba4:	80 ed       	ldi	r24, 0xD0	; 208
     ba6:	97 e0       	ldi	r25, 0x07	; 7
			PORTC = 0;
     ba8:	5a dc       	rcall	.-1868   	; 0x45e <mTimer>
			mTimer(250);
     baa:	18 b8       	out	0x08, r1	; 8
     bac:	8a ef       	ldi	r24, 0xFA	; 250
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	56 dc       	rcall	.-1876   	; 0x45e <mTimer>
		OCR0A = 0;

		int k;
		PORTC = 0b00110011;	//	flash before on plate
		mTimer(3000);
		for (k = 0; k < idxPlate; k++){
     bb2:	21 96       	adiw	r28, 0x01	; 1
     bb4:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <idxPlate>
     bb8:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <idxPlate+0x1>
     bbc:	c8 17       	cp	r28, r24
     bbe:	d9 07       	cpc	r29, r25
     bc0:	4c f3       	brlt	.-46     	; 0xb94 <main+0x106>
			PORTC = plate[k];
			mTimer(2000);
			PORTC = 0;
			mTimer(250);
		}
		DDRC = 0;
     bc2:	17 b8       	out	0x07, r1	; 7
		DDRA = 0;
     bc4:	11 b8       	out	0x01, r1	; 1
		DDRH = 0;
     bc6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
		DDRB = 0;
     bca:	14 b8       	out	0x04, r1	; 4
		cli();
     bcc:	f8 94       	cli
	}
}// end main
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <__vector_5>:
	//	restart dc
	OCR0A = (dutyCycle/100.0)*255.0;
}

//	rampdown function interrtupt
ISR(INT4_vect){
     bd4:	1f 92       	push	r1
     bd6:	0f 92       	push	r0
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	0f 92       	push	r0
     bdc:	11 24       	eor	r1, r1
     bde:	0b b6       	in	r0, 0x3b	; 59
     be0:	0f 92       	push	r0
     be2:	2f 93       	push	r18
     be4:	3f 93       	push	r19
     be6:	4f 93       	push	r20
     be8:	5f 93       	push	r21
     bea:	6f 93       	push	r22
     bec:	7f 93       	push	r23
     bee:	8f 93       	push	r24
     bf0:	9f 93       	push	r25
     bf2:	af 93       	push	r26
     bf4:	bf 93       	push	r27
     bf6:	ef 93       	push	r30
     bf8:	ff 93       	push	r31
	
	rampFlag = 1;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__data_end+0x1>
     c02:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__data_end>
	
	main();
     c06:	43 df       	rcall	.-378    	; 0xa8e <main>
}
     c08:	ff 91       	pop	r31
     c0a:	ef 91       	pop	r30
     c0c:	bf 91       	pop	r27
     c0e:	af 91       	pop	r26
     c10:	9f 91       	pop	r25
     c12:	8f 91       	pop	r24
     c14:	7f 91       	pop	r23
     c16:	6f 91       	pop	r22
     c18:	5f 91       	pop	r21
     c1a:	4f 91       	pop	r20
     c1c:	3f 91       	pop	r19
     c1e:	2f 91       	pop	r18
     c20:	0f 90       	pop	r0
     c22:	0b be       	out	0x3b, r0	; 59
     c24:	0f 90       	pop	r0
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	0f 90       	pop	r0
     c2a:	1f 90       	pop	r1
     c2c:	18 95       	reti

00000c2e <__divsf3>:
     c2e:	0c d0       	rcall	.+24     	; 0xc48 <__divsf3x>
     c30:	e6 c0       	rjmp	.+460    	; 0xdfe <__fp_round>
     c32:	de d0       	rcall	.+444    	; 0xdf0 <__fp_pscB>
     c34:	40 f0       	brcs	.+16     	; 0xc46 <__divsf3+0x18>
     c36:	d5 d0       	rcall	.+426    	; 0xde2 <__fp_pscA>
     c38:	30 f0       	brcs	.+12     	; 0xc46 <__divsf3+0x18>
     c3a:	21 f4       	brne	.+8      	; 0xc44 <__divsf3+0x16>
     c3c:	5f 3f       	cpi	r21, 0xFF	; 255
     c3e:	19 f0       	breq	.+6      	; 0xc46 <__divsf3+0x18>
     c40:	c7 c0       	rjmp	.+398    	; 0xdd0 <__fp_inf>
     c42:	51 11       	cpse	r21, r1
     c44:	10 c1       	rjmp	.+544    	; 0xe66 <__fp_szero>
     c46:	ca c0       	rjmp	.+404    	; 0xddc <__fp_nan>

00000c48 <__divsf3x>:
     c48:	eb d0       	rcall	.+470    	; 0xe20 <__fp_split3>
     c4a:	98 f3       	brcs	.-26     	; 0xc32 <__divsf3+0x4>

00000c4c <__divsf3_pse>:
     c4c:	99 23       	and	r25, r25
     c4e:	c9 f3       	breq	.-14     	; 0xc42 <__divsf3+0x14>
     c50:	55 23       	and	r21, r21
     c52:	b1 f3       	breq	.-20     	; 0xc40 <__divsf3+0x12>
     c54:	95 1b       	sub	r25, r21
     c56:	55 0b       	sbc	r21, r21
     c58:	bb 27       	eor	r27, r27
     c5a:	aa 27       	eor	r26, r26
     c5c:	62 17       	cp	r22, r18
     c5e:	73 07       	cpc	r23, r19
     c60:	84 07       	cpc	r24, r20
     c62:	38 f0       	brcs	.+14     	; 0xc72 <__divsf3_pse+0x26>
     c64:	9f 5f       	subi	r25, 0xFF	; 255
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
     c68:	22 0f       	add	r18, r18
     c6a:	33 1f       	adc	r19, r19
     c6c:	44 1f       	adc	r20, r20
     c6e:	aa 1f       	adc	r26, r26
     c70:	a9 f3       	breq	.-22     	; 0xc5c <__divsf3_pse+0x10>
     c72:	33 d0       	rcall	.+102    	; 0xcda <__divsf3_pse+0x8e>
     c74:	0e 2e       	mov	r0, r30
     c76:	3a f0       	brmi	.+14     	; 0xc86 <__divsf3_pse+0x3a>
     c78:	e0 e8       	ldi	r30, 0x80	; 128
     c7a:	30 d0       	rcall	.+96     	; 0xcdc <__divsf3_pse+0x90>
     c7c:	91 50       	subi	r25, 0x01	; 1
     c7e:	50 40       	sbci	r21, 0x00	; 0
     c80:	e6 95       	lsr	r30
     c82:	00 1c       	adc	r0, r0
     c84:	ca f7       	brpl	.-14     	; 0xc78 <__divsf3_pse+0x2c>
     c86:	29 d0       	rcall	.+82     	; 0xcda <__divsf3_pse+0x8e>
     c88:	fe 2f       	mov	r31, r30
     c8a:	27 d0       	rcall	.+78     	; 0xcda <__divsf3_pse+0x8e>
     c8c:	66 0f       	add	r22, r22
     c8e:	77 1f       	adc	r23, r23
     c90:	88 1f       	adc	r24, r24
     c92:	bb 1f       	adc	r27, r27
     c94:	26 17       	cp	r18, r22
     c96:	37 07       	cpc	r19, r23
     c98:	48 07       	cpc	r20, r24
     c9a:	ab 07       	cpc	r26, r27
     c9c:	b0 e8       	ldi	r27, 0x80	; 128
     c9e:	09 f0       	breq	.+2      	; 0xca2 <__divsf3_pse+0x56>
     ca0:	bb 0b       	sbc	r27, r27
     ca2:	80 2d       	mov	r24, r0
     ca4:	bf 01       	movw	r22, r30
     ca6:	ff 27       	eor	r31, r31
     ca8:	93 58       	subi	r25, 0x83	; 131
     caa:	5f 4f       	sbci	r21, 0xFF	; 255
     cac:	2a f0       	brmi	.+10     	; 0xcb8 <__divsf3_pse+0x6c>
     cae:	9e 3f       	cpi	r25, 0xFE	; 254
     cb0:	51 05       	cpc	r21, r1
     cb2:	68 f0       	brcs	.+26     	; 0xcce <__divsf3_pse+0x82>
     cb4:	8d c0       	rjmp	.+282    	; 0xdd0 <__fp_inf>
     cb6:	d7 c0       	rjmp	.+430    	; 0xe66 <__fp_szero>
     cb8:	5f 3f       	cpi	r21, 0xFF	; 255
     cba:	ec f3       	brlt	.-6      	; 0xcb6 <__divsf3_pse+0x6a>
     cbc:	98 3e       	cpi	r25, 0xE8	; 232
     cbe:	dc f3       	brlt	.-10     	; 0xcb6 <__divsf3_pse+0x6a>
     cc0:	86 95       	lsr	r24
     cc2:	77 95       	ror	r23
     cc4:	67 95       	ror	r22
     cc6:	b7 95       	ror	r27
     cc8:	f7 95       	ror	r31
     cca:	9f 5f       	subi	r25, 0xFF	; 255
     ccc:	c9 f7       	brne	.-14     	; 0xcc0 <__divsf3_pse+0x74>
     cce:	88 0f       	add	r24, r24
     cd0:	91 1d       	adc	r25, r1
     cd2:	96 95       	lsr	r25
     cd4:	87 95       	ror	r24
     cd6:	97 f9       	bld	r25, 7
     cd8:	08 95       	ret
     cda:	e1 e0       	ldi	r30, 0x01	; 1
     cdc:	66 0f       	add	r22, r22
     cde:	77 1f       	adc	r23, r23
     ce0:	88 1f       	adc	r24, r24
     ce2:	bb 1f       	adc	r27, r27
     ce4:	62 17       	cp	r22, r18
     ce6:	73 07       	cpc	r23, r19
     ce8:	84 07       	cpc	r24, r20
     cea:	ba 07       	cpc	r27, r26
     cec:	20 f0       	brcs	.+8      	; 0xcf6 <__divsf3_pse+0xaa>
     cee:	62 1b       	sub	r22, r18
     cf0:	73 0b       	sbc	r23, r19
     cf2:	84 0b       	sbc	r24, r20
     cf4:	ba 0b       	sbc	r27, r26
     cf6:	ee 1f       	adc	r30, r30
     cf8:	88 f7       	brcc	.-30     	; 0xcdc <__divsf3_pse+0x90>
     cfa:	e0 95       	com	r30
     cfc:	08 95       	ret

00000cfe <__fixunssfsi>:
     cfe:	98 d0       	rcall	.+304    	; 0xe30 <__fp_splitA>
     d00:	88 f0       	brcs	.+34     	; 0xd24 <__fixunssfsi+0x26>
     d02:	9f 57       	subi	r25, 0x7F	; 127
     d04:	90 f0       	brcs	.+36     	; 0xd2a <__fixunssfsi+0x2c>
     d06:	b9 2f       	mov	r27, r25
     d08:	99 27       	eor	r25, r25
     d0a:	b7 51       	subi	r27, 0x17	; 23
     d0c:	a0 f0       	brcs	.+40     	; 0xd36 <__fixunssfsi+0x38>
     d0e:	d1 f0       	breq	.+52     	; 0xd44 <__fixunssfsi+0x46>
     d10:	66 0f       	add	r22, r22
     d12:	77 1f       	adc	r23, r23
     d14:	88 1f       	adc	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	1a f0       	brmi	.+6      	; 0xd20 <__fixunssfsi+0x22>
     d1a:	ba 95       	dec	r27
     d1c:	c9 f7       	brne	.-14     	; 0xd10 <__fixunssfsi+0x12>
     d1e:	12 c0       	rjmp	.+36     	; 0xd44 <__fixunssfsi+0x46>
     d20:	b1 30       	cpi	r27, 0x01	; 1
     d22:	81 f0       	breq	.+32     	; 0xd44 <__fixunssfsi+0x46>
     d24:	9f d0       	rcall	.+318    	; 0xe64 <__fp_zero>
     d26:	b1 e0       	ldi	r27, 0x01	; 1
     d28:	08 95       	ret
     d2a:	9c c0       	rjmp	.+312    	; 0xe64 <__fp_zero>
     d2c:	67 2f       	mov	r22, r23
     d2e:	78 2f       	mov	r23, r24
     d30:	88 27       	eor	r24, r24
     d32:	b8 5f       	subi	r27, 0xF8	; 248
     d34:	39 f0       	breq	.+14     	; 0xd44 <__fixunssfsi+0x46>
     d36:	b9 3f       	cpi	r27, 0xF9	; 249
     d38:	cc f3       	brlt	.-14     	; 0xd2c <__fixunssfsi+0x2e>
     d3a:	86 95       	lsr	r24
     d3c:	77 95       	ror	r23
     d3e:	67 95       	ror	r22
     d40:	b3 95       	inc	r27
     d42:	d9 f7       	brne	.-10     	; 0xd3a <__fixunssfsi+0x3c>
     d44:	3e f4       	brtc	.+14     	; 0xd54 <__fixunssfsi+0x56>
     d46:	90 95       	com	r25
     d48:	80 95       	com	r24
     d4a:	70 95       	com	r23
     d4c:	61 95       	neg	r22
     d4e:	7f 4f       	sbci	r23, 0xFF	; 255
     d50:	8f 4f       	sbci	r24, 0xFF	; 255
     d52:	9f 4f       	sbci	r25, 0xFF	; 255
     d54:	08 95       	ret

00000d56 <__floatunsisf>:
     d56:	e8 94       	clt
     d58:	09 c0       	rjmp	.+18     	; 0xd6c <__floatsisf+0x12>

00000d5a <__floatsisf>:
     d5a:	97 fb       	bst	r25, 7
     d5c:	3e f4       	brtc	.+14     	; 0xd6c <__floatsisf+0x12>
     d5e:	90 95       	com	r25
     d60:	80 95       	com	r24
     d62:	70 95       	com	r23
     d64:	61 95       	neg	r22
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	8f 4f       	sbci	r24, 0xFF	; 255
     d6a:	9f 4f       	sbci	r25, 0xFF	; 255
     d6c:	99 23       	and	r25, r25
     d6e:	a9 f0       	breq	.+42     	; 0xd9a <__floatsisf+0x40>
     d70:	f9 2f       	mov	r31, r25
     d72:	96 e9       	ldi	r25, 0x96	; 150
     d74:	bb 27       	eor	r27, r27
     d76:	93 95       	inc	r25
     d78:	f6 95       	lsr	r31
     d7a:	87 95       	ror	r24
     d7c:	77 95       	ror	r23
     d7e:	67 95       	ror	r22
     d80:	b7 95       	ror	r27
     d82:	f1 11       	cpse	r31, r1
     d84:	f8 cf       	rjmp	.-16     	; 0xd76 <__floatsisf+0x1c>
     d86:	fa f4       	brpl	.+62     	; 0xdc6 <__floatsisf+0x6c>
     d88:	bb 0f       	add	r27, r27
     d8a:	11 f4       	brne	.+4      	; 0xd90 <__floatsisf+0x36>
     d8c:	60 ff       	sbrs	r22, 0
     d8e:	1b c0       	rjmp	.+54     	; 0xdc6 <__floatsisf+0x6c>
     d90:	6f 5f       	subi	r22, 0xFF	; 255
     d92:	7f 4f       	sbci	r23, 0xFF	; 255
     d94:	8f 4f       	sbci	r24, 0xFF	; 255
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	16 c0       	rjmp	.+44     	; 0xdc6 <__floatsisf+0x6c>
     d9a:	88 23       	and	r24, r24
     d9c:	11 f0       	breq	.+4      	; 0xda2 <__floatsisf+0x48>
     d9e:	96 e9       	ldi	r25, 0x96	; 150
     da0:	11 c0       	rjmp	.+34     	; 0xdc4 <__floatsisf+0x6a>
     da2:	77 23       	and	r23, r23
     da4:	21 f0       	breq	.+8      	; 0xdae <__floatsisf+0x54>
     da6:	9e e8       	ldi	r25, 0x8E	; 142
     da8:	87 2f       	mov	r24, r23
     daa:	76 2f       	mov	r23, r22
     dac:	05 c0       	rjmp	.+10     	; 0xdb8 <__floatsisf+0x5e>
     dae:	66 23       	and	r22, r22
     db0:	71 f0       	breq	.+28     	; 0xdce <__floatsisf+0x74>
     db2:	96 e8       	ldi	r25, 0x86	; 134
     db4:	86 2f       	mov	r24, r22
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	2a f0       	brmi	.+10     	; 0xdc6 <__floatsisf+0x6c>
     dbc:	9a 95       	dec	r25
     dbe:	66 0f       	add	r22, r22
     dc0:	77 1f       	adc	r23, r23
     dc2:	88 1f       	adc	r24, r24
     dc4:	da f7       	brpl	.-10     	; 0xdbc <__floatsisf+0x62>
     dc6:	88 0f       	add	r24, r24
     dc8:	96 95       	lsr	r25
     dca:	87 95       	ror	r24
     dcc:	97 f9       	bld	r25, 7
     dce:	08 95       	ret

00000dd0 <__fp_inf>:
     dd0:	97 f9       	bld	r25, 7
     dd2:	9f 67       	ori	r25, 0x7F	; 127
     dd4:	80 e8       	ldi	r24, 0x80	; 128
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	08 95       	ret

00000ddc <__fp_nan>:
     ddc:	9f ef       	ldi	r25, 0xFF	; 255
     dde:	80 ec       	ldi	r24, 0xC0	; 192
     de0:	08 95       	ret

00000de2 <__fp_pscA>:
     de2:	00 24       	eor	r0, r0
     de4:	0a 94       	dec	r0
     de6:	16 16       	cp	r1, r22
     de8:	17 06       	cpc	r1, r23
     dea:	18 06       	cpc	r1, r24
     dec:	09 06       	cpc	r0, r25
     dee:	08 95       	ret

00000df0 <__fp_pscB>:
     df0:	00 24       	eor	r0, r0
     df2:	0a 94       	dec	r0
     df4:	12 16       	cp	r1, r18
     df6:	13 06       	cpc	r1, r19
     df8:	14 06       	cpc	r1, r20
     dfa:	05 06       	cpc	r0, r21
     dfc:	08 95       	ret

00000dfe <__fp_round>:
     dfe:	09 2e       	mov	r0, r25
     e00:	03 94       	inc	r0
     e02:	00 0c       	add	r0, r0
     e04:	11 f4       	brne	.+4      	; 0xe0a <__fp_round+0xc>
     e06:	88 23       	and	r24, r24
     e08:	52 f0       	brmi	.+20     	; 0xe1e <__fp_round+0x20>
     e0a:	bb 0f       	add	r27, r27
     e0c:	40 f4       	brcc	.+16     	; 0xe1e <__fp_round+0x20>
     e0e:	bf 2b       	or	r27, r31
     e10:	11 f4       	brne	.+4      	; 0xe16 <__fp_round+0x18>
     e12:	60 ff       	sbrs	r22, 0
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <__fp_round+0x20>
     e16:	6f 5f       	subi	r22, 0xFF	; 255
     e18:	7f 4f       	sbci	r23, 0xFF	; 255
     e1a:	8f 4f       	sbci	r24, 0xFF	; 255
     e1c:	9f 4f       	sbci	r25, 0xFF	; 255
     e1e:	08 95       	ret

00000e20 <__fp_split3>:
     e20:	57 fd       	sbrc	r21, 7
     e22:	90 58       	subi	r25, 0x80	; 128
     e24:	44 0f       	add	r20, r20
     e26:	55 1f       	adc	r21, r21
     e28:	59 f0       	breq	.+22     	; 0xe40 <__fp_splitA+0x10>
     e2a:	5f 3f       	cpi	r21, 0xFF	; 255
     e2c:	71 f0       	breq	.+28     	; 0xe4a <__fp_splitA+0x1a>
     e2e:	47 95       	ror	r20

00000e30 <__fp_splitA>:
     e30:	88 0f       	add	r24, r24
     e32:	97 fb       	bst	r25, 7
     e34:	99 1f       	adc	r25, r25
     e36:	61 f0       	breq	.+24     	; 0xe50 <__fp_splitA+0x20>
     e38:	9f 3f       	cpi	r25, 0xFF	; 255
     e3a:	79 f0       	breq	.+30     	; 0xe5a <__fp_splitA+0x2a>
     e3c:	87 95       	ror	r24
     e3e:	08 95       	ret
     e40:	12 16       	cp	r1, r18
     e42:	13 06       	cpc	r1, r19
     e44:	14 06       	cpc	r1, r20
     e46:	55 1f       	adc	r21, r21
     e48:	f2 cf       	rjmp	.-28     	; 0xe2e <__fp_split3+0xe>
     e4a:	46 95       	lsr	r20
     e4c:	f1 df       	rcall	.-30     	; 0xe30 <__fp_splitA>
     e4e:	08 c0       	rjmp	.+16     	; 0xe60 <__fp_splitA+0x30>
     e50:	16 16       	cp	r1, r22
     e52:	17 06       	cpc	r1, r23
     e54:	18 06       	cpc	r1, r24
     e56:	99 1f       	adc	r25, r25
     e58:	f1 cf       	rjmp	.-30     	; 0xe3c <__fp_splitA+0xc>
     e5a:	86 95       	lsr	r24
     e5c:	71 05       	cpc	r23, r1
     e5e:	61 05       	cpc	r22, r1
     e60:	08 94       	sec
     e62:	08 95       	ret

00000e64 <__fp_zero>:
     e64:	e8 94       	clt

00000e66 <__fp_szero>:
     e66:	bb 27       	eor	r27, r27
     e68:	66 27       	eor	r22, r22
     e6a:	77 27       	eor	r23, r23
     e6c:	cb 01       	movw	r24, r22
     e6e:	97 f9       	bld	r25, 7
     e70:	08 95       	ret

00000e72 <__mulsf3>:
     e72:	0b d0       	rcall	.+22     	; 0xe8a <__mulsf3x>
     e74:	c4 cf       	rjmp	.-120    	; 0xdfe <__fp_round>
     e76:	b5 df       	rcall	.-150    	; 0xde2 <__fp_pscA>
     e78:	28 f0       	brcs	.+10     	; 0xe84 <__mulsf3+0x12>
     e7a:	ba df       	rcall	.-140    	; 0xdf0 <__fp_pscB>
     e7c:	18 f0       	brcs	.+6      	; 0xe84 <__mulsf3+0x12>
     e7e:	95 23       	and	r25, r21
     e80:	09 f0       	breq	.+2      	; 0xe84 <__mulsf3+0x12>
     e82:	a6 cf       	rjmp	.-180    	; 0xdd0 <__fp_inf>
     e84:	ab cf       	rjmp	.-170    	; 0xddc <__fp_nan>
     e86:	11 24       	eor	r1, r1
     e88:	ee cf       	rjmp	.-36     	; 0xe66 <__fp_szero>

00000e8a <__mulsf3x>:
     e8a:	ca df       	rcall	.-108    	; 0xe20 <__fp_split3>
     e8c:	a0 f3       	brcs	.-24     	; 0xe76 <__mulsf3+0x4>

00000e8e <__mulsf3_pse>:
     e8e:	95 9f       	mul	r25, r21
     e90:	d1 f3       	breq	.-12     	; 0xe86 <__mulsf3+0x14>
     e92:	95 0f       	add	r25, r21
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	55 1f       	adc	r21, r21
     e98:	62 9f       	mul	r22, r18
     e9a:	f0 01       	movw	r30, r0
     e9c:	72 9f       	mul	r23, r18
     e9e:	bb 27       	eor	r27, r27
     ea0:	f0 0d       	add	r31, r0
     ea2:	b1 1d       	adc	r27, r1
     ea4:	63 9f       	mul	r22, r19
     ea6:	aa 27       	eor	r26, r26
     ea8:	f0 0d       	add	r31, r0
     eaa:	b1 1d       	adc	r27, r1
     eac:	aa 1f       	adc	r26, r26
     eae:	64 9f       	mul	r22, r20
     eb0:	66 27       	eor	r22, r22
     eb2:	b0 0d       	add	r27, r0
     eb4:	a1 1d       	adc	r26, r1
     eb6:	66 1f       	adc	r22, r22
     eb8:	82 9f       	mul	r24, r18
     eba:	22 27       	eor	r18, r18
     ebc:	b0 0d       	add	r27, r0
     ebe:	a1 1d       	adc	r26, r1
     ec0:	62 1f       	adc	r22, r18
     ec2:	73 9f       	mul	r23, r19
     ec4:	b0 0d       	add	r27, r0
     ec6:	a1 1d       	adc	r26, r1
     ec8:	62 1f       	adc	r22, r18
     eca:	83 9f       	mul	r24, r19
     ecc:	a0 0d       	add	r26, r0
     ece:	61 1d       	adc	r22, r1
     ed0:	22 1f       	adc	r18, r18
     ed2:	74 9f       	mul	r23, r20
     ed4:	33 27       	eor	r19, r19
     ed6:	a0 0d       	add	r26, r0
     ed8:	61 1d       	adc	r22, r1
     eda:	23 1f       	adc	r18, r19
     edc:	84 9f       	mul	r24, r20
     ede:	60 0d       	add	r22, r0
     ee0:	21 1d       	adc	r18, r1
     ee2:	82 2f       	mov	r24, r18
     ee4:	76 2f       	mov	r23, r22
     ee6:	6a 2f       	mov	r22, r26
     ee8:	11 24       	eor	r1, r1
     eea:	9f 57       	subi	r25, 0x7F	; 127
     eec:	50 40       	sbci	r21, 0x00	; 0
     eee:	8a f0       	brmi	.+34     	; 0xf12 <__mulsf3_pse+0x84>
     ef0:	e1 f0       	breq	.+56     	; 0xf2a <__mulsf3_pse+0x9c>
     ef2:	88 23       	and	r24, r24
     ef4:	4a f0       	brmi	.+18     	; 0xf08 <__mulsf3_pse+0x7a>
     ef6:	ee 0f       	add	r30, r30
     ef8:	ff 1f       	adc	r31, r31
     efa:	bb 1f       	adc	r27, r27
     efc:	66 1f       	adc	r22, r22
     efe:	77 1f       	adc	r23, r23
     f00:	88 1f       	adc	r24, r24
     f02:	91 50       	subi	r25, 0x01	; 1
     f04:	50 40       	sbci	r21, 0x00	; 0
     f06:	a9 f7       	brne	.-22     	; 0xef2 <__mulsf3_pse+0x64>
     f08:	9e 3f       	cpi	r25, 0xFE	; 254
     f0a:	51 05       	cpc	r21, r1
     f0c:	70 f0       	brcs	.+28     	; 0xf2a <__mulsf3_pse+0x9c>
     f0e:	60 cf       	rjmp	.-320    	; 0xdd0 <__fp_inf>
     f10:	aa cf       	rjmp	.-172    	; 0xe66 <__fp_szero>
     f12:	5f 3f       	cpi	r21, 0xFF	; 255
     f14:	ec f3       	brlt	.-6      	; 0xf10 <__mulsf3_pse+0x82>
     f16:	98 3e       	cpi	r25, 0xE8	; 232
     f18:	dc f3       	brlt	.-10     	; 0xf10 <__mulsf3_pse+0x82>
     f1a:	86 95       	lsr	r24
     f1c:	77 95       	ror	r23
     f1e:	67 95       	ror	r22
     f20:	b7 95       	ror	r27
     f22:	f7 95       	ror	r31
     f24:	e7 95       	ror	r30
     f26:	9f 5f       	subi	r25, 0xFF	; 255
     f28:	c1 f7       	brne	.-16     	; 0xf1a <__mulsf3_pse+0x8c>
     f2a:	fe 2b       	or	r31, r30
     f2c:	88 0f       	add	r24, r24
     f2e:	91 1d       	adc	r25, r1
     f30:	96 95       	lsr	r25
     f32:	87 95       	ror	r24
     f34:	97 f9       	bld	r25, 7
     f36:	08 95       	ret

00000f38 <__divmodsi4>:
     f38:	05 2e       	mov	r0, r21
     f3a:	97 fb       	bst	r25, 7
     f3c:	16 f4       	brtc	.+4      	; 0xf42 <__divmodsi4+0xa>
     f3e:	00 94       	com	r0
     f40:	0f d0       	rcall	.+30     	; 0xf60 <__negsi2>
     f42:	57 fd       	sbrc	r21, 7
     f44:	05 d0       	rcall	.+10     	; 0xf50 <__divmodsi4_neg2>
     f46:	14 d0       	rcall	.+40     	; 0xf70 <__udivmodsi4>
     f48:	07 fc       	sbrc	r0, 7
     f4a:	02 d0       	rcall	.+4      	; 0xf50 <__divmodsi4_neg2>
     f4c:	46 f4       	brtc	.+16     	; 0xf5e <__divmodsi4_exit>
     f4e:	08 c0       	rjmp	.+16     	; 0xf60 <__negsi2>

00000f50 <__divmodsi4_neg2>:
     f50:	50 95       	com	r21
     f52:	40 95       	com	r20
     f54:	30 95       	com	r19
     f56:	21 95       	neg	r18
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
     f5a:	4f 4f       	sbci	r20, 0xFF	; 255
     f5c:	5f 4f       	sbci	r21, 0xFF	; 255

00000f5e <__divmodsi4_exit>:
     f5e:	08 95       	ret

00000f60 <__negsi2>:
     f60:	90 95       	com	r25
     f62:	80 95       	com	r24
     f64:	70 95       	com	r23
     f66:	61 95       	neg	r22
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	8f 4f       	sbci	r24, 0xFF	; 255
     f6c:	9f 4f       	sbci	r25, 0xFF	; 255
     f6e:	08 95       	ret

00000f70 <__udivmodsi4>:
     f70:	a1 e2       	ldi	r26, 0x21	; 33
     f72:	1a 2e       	mov	r1, r26
     f74:	aa 1b       	sub	r26, r26
     f76:	bb 1b       	sub	r27, r27
     f78:	fd 01       	movw	r30, r26
     f7a:	0d c0       	rjmp	.+26     	; 0xf96 <__udivmodsi4_ep>

00000f7c <__udivmodsi4_loop>:
     f7c:	aa 1f       	adc	r26, r26
     f7e:	bb 1f       	adc	r27, r27
     f80:	ee 1f       	adc	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	a2 17       	cp	r26, r18
     f86:	b3 07       	cpc	r27, r19
     f88:	e4 07       	cpc	r30, r20
     f8a:	f5 07       	cpc	r31, r21
     f8c:	20 f0       	brcs	.+8      	; 0xf96 <__udivmodsi4_ep>
     f8e:	a2 1b       	sub	r26, r18
     f90:	b3 0b       	sbc	r27, r19
     f92:	e4 0b       	sbc	r30, r20
     f94:	f5 0b       	sbc	r31, r21

00000f96 <__udivmodsi4_ep>:
     f96:	66 1f       	adc	r22, r22
     f98:	77 1f       	adc	r23, r23
     f9a:	88 1f       	adc	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	1a 94       	dec	r1
     fa0:	69 f7       	brne	.-38     	; 0xf7c <__udivmodsi4_loop>
     fa2:	60 95       	com	r22
     fa4:	70 95       	com	r23
     fa6:	80 95       	com	r24
     fa8:	90 95       	com	r25
     faa:	9b 01       	movw	r18, r22
     fac:	ac 01       	movw	r20, r24
     fae:	bd 01       	movw	r22, r26
     fb0:	cf 01       	movw	r24, r30
     fb2:	08 95       	ret

00000fb4 <malloc>:
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	82 30       	cpi	r24, 0x02	; 2
     fbe:	91 05       	cpc	r25, r1
     fc0:	10 f4       	brcc	.+4      	; 0xfc6 <malloc+0x12>
     fc2:	82 e0       	ldi	r24, 0x02	; 2
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	e0 91 bc 03 	lds	r30, 0x03BC	; 0x8003bc <__flp>
     fca:	f0 91 bd 03 	lds	r31, 0x03BD	; 0x8003bd <__flp+0x1>
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	a0 e0       	ldi	r26, 0x00	; 0
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	30 97       	sbiw	r30, 0x00	; 0
     fd8:	19 f1       	breq	.+70     	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
     fda:	40 81       	ld	r20, Z
     fdc:	51 81       	ldd	r21, Z+1	; 0x01
     fde:	02 81       	ldd	r16, Z+2	; 0x02
     fe0:	13 81       	ldd	r17, Z+3	; 0x03
     fe2:	48 17       	cp	r20, r24
     fe4:	59 07       	cpc	r21, r25
     fe6:	c8 f0       	brcs	.+50     	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
     fe8:	84 17       	cp	r24, r20
     fea:	95 07       	cpc	r25, r21
     fec:	69 f4       	brne	.+26     	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
     fee:	10 97       	sbiw	r26, 0x00	; 0
     ff0:	31 f0       	breq	.+12     	; 0xffe <malloc+0x4a>
     ff2:	12 96       	adiw	r26, 0x02	; 2
     ff4:	0c 93       	st	X, r16
     ff6:	12 97       	sbiw	r26, 0x02	; 2
     ff8:	13 96       	adiw	r26, 0x03	; 3
     ffa:	1c 93       	st	X, r17
     ffc:	27 c0       	rjmp	.+78     	; 0x104c <__EEPROM_REGION_LENGTH__+0x4c>
     ffe:	00 93 bc 03 	sts	0x03BC, r16	; 0x8003bc <__flp>
    1002:	10 93 bd 03 	sts	0x03BD, r17	; 0x8003bd <__flp+0x1>
    1006:	22 c0       	rjmp	.+68     	; 0x104c <__EEPROM_REGION_LENGTH__+0x4c>
    1008:	21 15       	cp	r18, r1
    100a:	31 05       	cpc	r19, r1
    100c:	19 f0       	breq	.+6      	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
    100e:	42 17       	cp	r20, r18
    1010:	53 07       	cpc	r21, r19
    1012:	18 f4       	brcc	.+6      	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    1014:	9a 01       	movw	r18, r20
    1016:	bd 01       	movw	r22, r26
    1018:	ef 01       	movw	r28, r30
    101a:	df 01       	movw	r26, r30
    101c:	f8 01       	movw	r30, r16
    101e:	db cf       	rjmp	.-74     	; 0xfd6 <malloc+0x22>
    1020:	21 15       	cp	r18, r1
    1022:	31 05       	cpc	r19, r1
    1024:	f9 f0       	breq	.+62     	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
    1026:	28 1b       	sub	r18, r24
    1028:	39 0b       	sbc	r19, r25
    102a:	24 30       	cpi	r18, 0x04	; 4
    102c:	31 05       	cpc	r19, r1
    102e:	80 f4       	brcc	.+32     	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	9b 81       	ldd	r25, Y+3	; 0x03
    1034:	61 15       	cp	r22, r1
    1036:	71 05       	cpc	r23, r1
    1038:	21 f0       	breq	.+8      	; 0x1042 <__EEPROM_REGION_LENGTH__+0x42>
    103a:	fb 01       	movw	r30, r22
    103c:	93 83       	std	Z+3, r25	; 0x03
    103e:	82 83       	std	Z+2, r24	; 0x02
    1040:	04 c0       	rjmp	.+8      	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    1042:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <__flp+0x1>
    1046:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <__flp>
    104a:	fe 01       	movw	r30, r28
    104c:	32 96       	adiw	r30, 0x02	; 2
    104e:	44 c0       	rjmp	.+136    	; 0x10d8 <__EEPROM_REGION_LENGTH__+0xd8>
    1050:	fe 01       	movw	r30, r28
    1052:	e2 0f       	add	r30, r18
    1054:	f3 1f       	adc	r31, r19
    1056:	81 93       	st	Z+, r24
    1058:	91 93       	st	Z+, r25
    105a:	22 50       	subi	r18, 0x02	; 2
    105c:	31 09       	sbc	r19, r1
    105e:	39 83       	std	Y+1, r19	; 0x01
    1060:	28 83       	st	Y, r18
    1062:	3a c0       	rjmp	.+116    	; 0x10d8 <__EEPROM_REGION_LENGTH__+0xd8>
    1064:	20 91 ba 03 	lds	r18, 0x03BA	; 0x8003ba <__brkval>
    1068:	30 91 bb 03 	lds	r19, 0x03BB	; 0x8003bb <__brkval+0x1>
    106c:	23 2b       	or	r18, r19
    106e:	41 f4       	brne	.+16     	; 0x1080 <__EEPROM_REGION_LENGTH__+0x80>
    1070:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    1074:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    1078:	30 93 bb 03 	sts	0x03BB, r19	; 0x8003bb <__brkval+0x1>
    107c:	20 93 ba 03 	sts	0x03BA, r18	; 0x8003ba <__brkval>
    1080:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    1084:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1088:	21 15       	cp	r18, r1
    108a:	31 05       	cpc	r19, r1
    108c:	41 f4       	brne	.+16     	; 0x109e <__EEPROM_REGION_LENGTH__+0x9e>
    108e:	2d b7       	in	r18, 0x3d	; 61
    1090:	3e b7       	in	r19, 0x3e	; 62
    1092:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    1096:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    109a:	24 1b       	sub	r18, r20
    109c:	35 0b       	sbc	r19, r21
    109e:	e0 91 ba 03 	lds	r30, 0x03BA	; 0x8003ba <__brkval>
    10a2:	f0 91 bb 03 	lds	r31, 0x03BB	; 0x8003bb <__brkval+0x1>
    10a6:	e2 17       	cp	r30, r18
    10a8:	f3 07       	cpc	r31, r19
    10aa:	a0 f4       	brcc	.+40     	; 0x10d4 <__EEPROM_REGION_LENGTH__+0xd4>
    10ac:	2e 1b       	sub	r18, r30
    10ae:	3f 0b       	sbc	r19, r31
    10b0:	28 17       	cp	r18, r24
    10b2:	39 07       	cpc	r19, r25
    10b4:	78 f0       	brcs	.+30     	; 0x10d4 <__EEPROM_REGION_LENGTH__+0xd4>
    10b6:	ac 01       	movw	r20, r24
    10b8:	4e 5f       	subi	r20, 0xFE	; 254
    10ba:	5f 4f       	sbci	r21, 0xFF	; 255
    10bc:	24 17       	cp	r18, r20
    10be:	35 07       	cpc	r19, r21
    10c0:	48 f0       	brcs	.+18     	; 0x10d4 <__EEPROM_REGION_LENGTH__+0xd4>
    10c2:	4e 0f       	add	r20, r30
    10c4:	5f 1f       	adc	r21, r31
    10c6:	50 93 bb 03 	sts	0x03BB, r21	; 0x8003bb <__brkval+0x1>
    10ca:	40 93 ba 03 	sts	0x03BA, r20	; 0x8003ba <__brkval>
    10ce:	81 93       	st	Z+, r24
    10d0:	91 93       	st	Z+, r25
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <__EEPROM_REGION_LENGTH__+0xd8>
    10d4:	e0 e0       	ldi	r30, 0x00	; 0
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	cf 01       	movw	r24, r30
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	08 95       	ret

000010e4 <free>:
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	09 f4       	brne	.+2      	; 0x10ee <free+0xa>
    10ec:	81 c0       	rjmp	.+258    	; 0x11f0 <free+0x10c>
    10ee:	fc 01       	movw	r30, r24
    10f0:	32 97       	sbiw	r30, 0x02	; 2
    10f2:	13 82       	std	Z+3, r1	; 0x03
    10f4:	12 82       	std	Z+2, r1	; 0x02
    10f6:	a0 91 bc 03 	lds	r26, 0x03BC	; 0x8003bc <__flp>
    10fa:	b0 91 bd 03 	lds	r27, 0x03BD	; 0x8003bd <__flp+0x1>
    10fe:	10 97       	sbiw	r26, 0x00	; 0
    1100:	81 f4       	brne	.+32     	; 0x1122 <free+0x3e>
    1102:	20 81       	ld	r18, Z
    1104:	31 81       	ldd	r19, Z+1	; 0x01
    1106:	82 0f       	add	r24, r18
    1108:	93 1f       	adc	r25, r19
    110a:	20 91 ba 03 	lds	r18, 0x03BA	; 0x8003ba <__brkval>
    110e:	30 91 bb 03 	lds	r19, 0x03BB	; 0x8003bb <__brkval+0x1>
    1112:	28 17       	cp	r18, r24
    1114:	39 07       	cpc	r19, r25
    1116:	51 f5       	brne	.+84     	; 0x116c <free+0x88>
    1118:	f0 93 bb 03 	sts	0x03BB, r31	; 0x8003bb <__brkval+0x1>
    111c:	e0 93 ba 03 	sts	0x03BA, r30	; 0x8003ba <__brkval>
    1120:	67 c0       	rjmp	.+206    	; 0x11f0 <free+0x10c>
    1122:	ed 01       	movw	r28, r26
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	ce 17       	cp	r28, r30
    112a:	df 07       	cpc	r29, r31
    112c:	40 f4       	brcc	.+16     	; 0x113e <free+0x5a>
    112e:	4a 81       	ldd	r20, Y+2	; 0x02
    1130:	5b 81       	ldd	r21, Y+3	; 0x03
    1132:	9e 01       	movw	r18, r28
    1134:	41 15       	cp	r20, r1
    1136:	51 05       	cpc	r21, r1
    1138:	f1 f0       	breq	.+60     	; 0x1176 <free+0x92>
    113a:	ea 01       	movw	r28, r20
    113c:	f5 cf       	rjmp	.-22     	; 0x1128 <free+0x44>
    113e:	d3 83       	std	Z+3, r29	; 0x03
    1140:	c2 83       	std	Z+2, r28	; 0x02
    1142:	40 81       	ld	r20, Z
    1144:	51 81       	ldd	r21, Z+1	; 0x01
    1146:	84 0f       	add	r24, r20
    1148:	95 1f       	adc	r25, r21
    114a:	c8 17       	cp	r28, r24
    114c:	d9 07       	cpc	r29, r25
    114e:	59 f4       	brne	.+22     	; 0x1166 <free+0x82>
    1150:	88 81       	ld	r24, Y
    1152:	99 81       	ldd	r25, Y+1	; 0x01
    1154:	84 0f       	add	r24, r20
    1156:	95 1f       	adc	r25, r21
    1158:	02 96       	adiw	r24, 0x02	; 2
    115a:	91 83       	std	Z+1, r25	; 0x01
    115c:	80 83       	st	Z, r24
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	9b 81       	ldd	r25, Y+3	; 0x03
    1162:	93 83       	std	Z+3, r25	; 0x03
    1164:	82 83       	std	Z+2, r24	; 0x02
    1166:	21 15       	cp	r18, r1
    1168:	31 05       	cpc	r19, r1
    116a:	29 f4       	brne	.+10     	; 0x1176 <free+0x92>
    116c:	f0 93 bd 03 	sts	0x03BD, r31	; 0x8003bd <__flp+0x1>
    1170:	e0 93 bc 03 	sts	0x03BC, r30	; 0x8003bc <__flp>
    1174:	3d c0       	rjmp	.+122    	; 0x11f0 <free+0x10c>
    1176:	e9 01       	movw	r28, r18
    1178:	fb 83       	std	Y+3, r31	; 0x03
    117a:	ea 83       	std	Y+2, r30	; 0x02
    117c:	49 91       	ld	r20, Y+
    117e:	59 91       	ld	r21, Y+
    1180:	c4 0f       	add	r28, r20
    1182:	d5 1f       	adc	r29, r21
    1184:	ec 17       	cp	r30, r28
    1186:	fd 07       	cpc	r31, r29
    1188:	61 f4       	brne	.+24     	; 0x11a2 <free+0xbe>
    118a:	80 81       	ld	r24, Z
    118c:	91 81       	ldd	r25, Z+1	; 0x01
    118e:	84 0f       	add	r24, r20
    1190:	95 1f       	adc	r25, r21
    1192:	02 96       	adiw	r24, 0x02	; 2
    1194:	e9 01       	movw	r28, r18
    1196:	99 83       	std	Y+1, r25	; 0x01
    1198:	88 83       	st	Y, r24
    119a:	82 81       	ldd	r24, Z+2	; 0x02
    119c:	93 81       	ldd	r25, Z+3	; 0x03
    119e:	9b 83       	std	Y+3, r25	; 0x03
    11a0:	8a 83       	std	Y+2, r24	; 0x02
    11a2:	e0 e0       	ldi	r30, 0x00	; 0
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	12 96       	adiw	r26, 0x02	; 2
    11a8:	8d 91       	ld	r24, X+
    11aa:	9c 91       	ld	r25, X
    11ac:	13 97       	sbiw	r26, 0x03	; 3
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	19 f0       	breq	.+6      	; 0x11b8 <free+0xd4>
    11b2:	fd 01       	movw	r30, r26
    11b4:	dc 01       	movw	r26, r24
    11b6:	f7 cf       	rjmp	.-18     	; 0x11a6 <free+0xc2>
    11b8:	8d 91       	ld	r24, X+
    11ba:	9c 91       	ld	r25, X
    11bc:	11 97       	sbiw	r26, 0x01	; 1
    11be:	9d 01       	movw	r18, r26
    11c0:	2e 5f       	subi	r18, 0xFE	; 254
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	82 0f       	add	r24, r18
    11c6:	93 1f       	adc	r25, r19
    11c8:	20 91 ba 03 	lds	r18, 0x03BA	; 0x8003ba <__brkval>
    11cc:	30 91 bb 03 	lds	r19, 0x03BB	; 0x8003bb <__brkval+0x1>
    11d0:	28 17       	cp	r18, r24
    11d2:	39 07       	cpc	r19, r25
    11d4:	69 f4       	brne	.+26     	; 0x11f0 <free+0x10c>
    11d6:	30 97       	sbiw	r30, 0x00	; 0
    11d8:	29 f4       	brne	.+10     	; 0x11e4 <free+0x100>
    11da:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <__flp+0x1>
    11de:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <__flp>
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <free+0x104>
    11e4:	13 82       	std	Z+3, r1	; 0x03
    11e6:	12 82       	std	Z+2, r1	; 0x02
    11e8:	b0 93 bb 03 	sts	0x03BB, r27	; 0x8003bb <__brkval+0x1>
    11ec:	a0 93 ba 03 	sts	0x03BA, r26	; 0x8003ba <__brkval>
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	08 95       	ret

000011f6 <_exit>:
    11f6:	f8 94       	cli

000011f8 <__stop_program>:
    11f8:	ff cf       	rjmp	.-2      	; 0x11f8 <__stop_program>
